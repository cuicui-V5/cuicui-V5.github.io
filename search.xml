<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS实现遮罩效果</title>
    <url>/20221216/CSS%E5%AE%9E%E7%8E%B0%E9%81%AE%E7%BD%A9%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">background</span>: <span class="title function_">url</span>(@/img/bg.<span class="property">jpg</span>) <span class="title function_">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">background-<span class="attr">size</span>: cover;</span><br><span class="line">background-blend-<span class="attr">mode</span>: multiply;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Git批量修改已提交的邮箱信息</title>
    <url>/20220511/Git%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E9%82%AE%E7%AE%B1%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>新建 <code>rename.sh</code> 内容如下</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OLD_EMAIL=&quot;原邮箱地址&quot;</span></span><br><span class="line"><span class="string">CORRECT_NAME=&quot;新用户名&quot;</span></span><br><span class="line"><span class="string">CORRECT_EMAIL=&quot;新邮箱地址&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">&#x27;</span> --tag-name-filter <span class="built_in">cat</span> -- --branches --tags</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用 git bash 运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh rename.sh</span><br></pre></td></tr></table></figure>
<p>强行提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --force --all</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript使用WebSocket</title>
    <url>/20221123/JavaScript%E4%BD%BF%E7%94%A8WebSocket/</url>
    <content><![CDATA[<p>使用 WebSocket 可以实现点对点的全双工即时通信</p>
<span id="more"></span>
<h1>ws 客户端的基本使用</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection open ...&quot;</span>);</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received Message: &quot;</span> + evt.<span class="property">data</span>);</span><br><span class="line">    ws.<span class="title function_">close</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="新建实例">新建实例</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>不能 catch 住 websocket 的超时 error 的</p>
</li>
</ul>
<h3 id="webSocket-readyState">webSocket.readyState</h3>
<p>返回实例的当前状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">CONNECTING</span>：值为<span class="number">0</span>，表示正在连接。</span><br><span class="line"><span class="variable constant_">OPEN</span>：值为<span class="number">1</span>，表示连接成功，可以通信了。</span><br><span class="line"><span class="variable constant_">CLOSING</span>：值为<span class="number">2</span>，表示连接正在关闭。</span><br><span class="line"><span class="variable constant_">CLOSED</span>：值为<span class="number">3</span>，表示连接已经关闭，或者打开连接失败。</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onopen">webSocket.onopen</h3>
<p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&quot;Hello Server!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onclose">webSocket.onclose</h3>
<p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> code = event.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">var</span> reason = event.<span class="property">reason</span>;</span><br><span class="line">    <span class="keyword">var</span> wasClean = event.<span class="property">wasClean</span>;</span><br><span class="line">    <span class="comment">// handle close event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onmessage">webSocket.onmessage</h3>
<p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 处理数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-send">webSocket.send()</h3>
<p>实例对象的<code>send()</code>方法用于向服务器发送数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">send</span>(<span class="string">&quot;your message&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="webSocket-onerror">webSocket.onerror</h2>
<p>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">addEventListener</span>(<span class="string">&quot;error&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// handle error event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1>ws 服务器端</h1>
<p>首先引入<code>ws</code>模块, 然后与客户端类似, 新建 socket 实例</p>
<p>使用<code>socket.send()</code>发送数据</p>
<p>使用 <code>socket.addEventListener(&quot;message&quot;, (&#123;data&#125;) =&gt; &#123;&#125;)</code>或<code>socket.on(&quot;messgae&quot;,()=&gt;&#123;&#125;)</code> 接收数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;ws&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">1234</span> &#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 向客户端发送消息</span></span><br><span class="line">    socket.<span class="title function_">send</span>(</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;hello from server&quot;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从客户端接收消息</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="keyword">const</span> packet = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(packet);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="获取所有连接">获取所有连接</h2>
<p>每个 ws 连接都为一个独立的<code>socket</code>实例</p>
<p>使用<code>server.clients</code>列出所有连接</p>
<p>向每个连接广播消息:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">boardCast</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    dataObj.<span class="property">onlineUser</span> = ws.<span class="property">clients</span>.<span class="property">size</span>;</span><br><span class="line">    ws.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(dataObj));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue封装一个分页器组件</title>
    <url>/20221204/Vue%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E5%88%86%E9%A1%B5%E5%99%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>一个分页器组件最重要的四个参数(需要外界传入)</p>
<ul class="lvl-0">
<li class="lvl-4">当前第几页: pageNo</li>
<li class="lvl-4">每页展示的数据数量: pageSize</li>
<li class="lvl-4">共有多少数据: total</li>
<li class="lvl-4">显示的连续页码: continues</li>
</ul>
<span id="more"></span>
<p>通过以上信息可以计算出来的数据</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>共有多少页: total/pageSize 向上取整</p>
</li>
<li class="lvl-4">
<p>显示的连续页码的起始与结束</p>
<ul class="lvl-2">
<li class="lvl-8">
<p>如果总页数小于要显示的连续页码</p>
<ul class="lvl-4">
<li class="lvl-12">起始为 1</li>
<li class="lvl-12">结束为总页数</li>
</ul>
</li>
<li class="lvl-8">
<p>如果总页数大于连续页码</p>
<ul class="lvl-4">
<li class="lvl-12">
<p>先计算出当前页码左边和右边要显示几个页码: 连续页码/2 向下取整</p>
<ul class="lvl-6">
<li class="lvl-16">
<p>起始页码: 当前显示的页码-上边计算出来的数据</p>
<ul class="lvl-8">
<li class="lvl-20">如果小于 1, 那么起始页码等于 1, 结束页码等于要显示的连续页码</li>
</ul>
</li>
<li class="lvl-16">
<p>结束页码: 当前显示的页码+上边计算出来的数据</p>
<ul class="lvl-8">
<li class="lvl-20">如果大于总页码, 那么起始页码等于总页码-连续页码+1, 结束页码等于总页码</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>分页器组件</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:disabled</span>=<span class="string">&quot;pageNo == 1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;emit(&#x27;changePage&#x27;, pageNo - 1)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            上一页</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.start &gt; 1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.start &gt; 2&quot;</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:class</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                active: pageNo == index + 1,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-for</span>=<span class="string">&quot;(page, index) in startAndEnd.end&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-show</span>=<span class="string">&quot;page &gt;= startAndEnd.start&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;emit(&#x27;changePage&#x27;, index + 1)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; page &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.end &lt; totalPage - 1&quot;</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.end &lt; totalPage&quot;</span>&gt;</span>&#123;&#123; totalPage &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:disabled</span>=<span class="string">&quot;pageNo == totalPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;emit(&#x27;changePage&#x27;, pageNo + 1)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            下一页</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 30px&quot;</span>&gt;</span>共 &#123;&#123; total &#125;&#125; 条<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; computed, toRefs, type <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> props = defineProps&lt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageNo</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageSize</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">total</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">continues</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;&gt;();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; pageNo, pageSize, total, continues &#125; = <span class="title function_">toRefs</span>(props);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;changePage&quot;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> totalPage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(total.<span class="property">value</span> / pageSize.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pageNo.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> startAndEnd = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> start = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pageNo.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果总页数小于要显示的页数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (totalPage.<span class="property">value</span> &lt; continues.<span class="property">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = totalPage.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 正常情况</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = pageNo.<span class="property">value</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(continues.<span class="property">value</span> / <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = pageNo.<span class="property">value</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(continues.<span class="property">value</span> / <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 异常情况</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (start &lt; <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = continues.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (end &gt; totalPage.<span class="property">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = totalPage.<span class="property">value</span> - continues.<span class="property">value</span> + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = totalPage.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// debugger;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;pagination&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>使用分页器组件</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">                  &lt;pagination</span><br><span class="line">                      v-<span class="keyword">if</span>=<span class="string">&quot;store.searchList&quot;</span></span><br><span class="line">                      :pageNo=<span class="string">&quot;searchParams.pageNo&quot;</span></span><br><span class="line">                      :pageSize=<span class="string">&quot;searchParams.pageSize&quot;</span></span><br><span class="line">                      :total=<span class="string">&quot;store.searchList.total&quot;</span></span><br><span class="line">                      :continues=<span class="string">&quot;5&quot;</span></span><br><span class="line">                      <span class="meta">@changePage</span>=<span class="string">&quot;changePage&quot;</span></span><br><span class="line">                  &gt;&lt;/pagination&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变页码并且发送请求</span></span><br><span class="line">  		<span class="keyword">const</span> <span class="title function_">changePage</span> = (<span class="params">pageNo: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pageNo);</span><br><span class="line"></span><br><span class="line">        searchParams.<span class="property">value</span>.<span class="property">pageNo</span> = pageNo;</span><br><span class="line">        store.<span class="title function_">getSearchList</span>(searchParams.<span class="property">value</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组总结</title>
    <url>/20221205/JavaScript%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>js 中的数组拥有众多方法, 在这里我加以总结便于复习</p>
<span id="more"></span>
<h1>数组的定义</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<h1>检测是否为数组</h1>
<h2 id="使用-instanceof-运算符">使用 instanceof 运算符</h2>
<p>instanceof ﻿ 可以判断原型是否处于原型链上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-Array-isArray-方法">使用 Array.isArray()方法</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure>
<h1>数组方法</h1>
<h2 id="数组操作方法">数组操作方法</h2>
<h3 id="push">push()</h3>
<p>向数组后方添加一个或多个元素, <strong>改变</strong>原数组, 返回<strong>数组长度</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h3 id="unshift">unshift()</h3>
<p>在数组前方添加一或多个元素, <strong>改变</strong>原数组, 返回<strong>数组长度</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">unshitf</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="pop">pop()</h3>
<p>删除数组后方的元素, <strong>改变</strong>原数组, 返回<strong>删除的内容</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>
<h3 id="shift">shift()</h3>
<p>删除数组前方的元素, <strong>改变</strong>原数组, 返回<strong>删除的内容</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="splice">splice()</h3>
<p>在指定位置删除或添加元素, <strong>改变</strong>原数组, 返回<strong>删除的元素组成的数组</strong></p>
<p>用法:</p>
<p>​<code>splice(操作元素的下标, 删除几个元素, 要添加的元素...)</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr [1,4,5,6,3]</span></span><br></pre></td></tr></table></figure>
<p>‍</p>
<h2 id="数组排序">数组排序</h2>
<h3 id="reverse">reverse()</h3>
<p>​<code>reverse() ​</code>​ 可以翻转数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br></pre></td></tr></table></figure>
<h3 id="sort">sort()</h3>
<p>对数组进行排序, <strong>改变</strong>原数组, 返回<strong>排序结果</strong></p>
<p>用法:</p>
<p>​<code>arr.sort(排序函数)</code>​</p>
<p><strong>排序函数</strong>: 排序函数传入两个参数, 分别为依次比较的两个元素, 如果返回大于 0 的值, 就交换位置, 如果小于 0, 就不交换</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 升序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a); <span class="comment">// 降序</span></span><br></pre></td></tr></table></figure>
<h2 id="连接数组">连接数组</h2>
<h3 id="concat">concat</h3>
<p>用来连接两个数组, <strong>不改变</strong>原数组, 返回<strong>连接后的数组</strong></p>
<p>语法: <code>arr1.concat(arr2, arr3)</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">concat</span>(arr2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h2 id="数组迭代方法">数组迭代方法</h2>
<p>数组迭代方法<strong>都不会更改</strong>原数组</p>
<h3 id="every">every()</h3>
<p>判断数组元素是否<strong>全部符合</strong>某个条件, 返回 <code>true</code> ​ 或 <code>false</code>​</p>
<p>语法: <code>every(item=&gt;true)</code>​</p>
<p>如果回调函数<strong>全部</strong>返回 <code>true</code>​, 那么才返回 <code>true</code>​, 否则就是 <code>false</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="some">some()</h3>
<p>判断数组元素<strong>是否符合条件</strong>, 只要有一个符合条件就返回 <code>true</code>​</p>
<p>语法: <code>some(item=&gt;true)</code>​</p>
<p>只要回调函数有一个返回了 <code>true</code>​, 那么 <code>some</code> ​ 的返回值就为 <code>true</code>​, 只有全部都是 <code>false</code>​, 那么才是 <code>false</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="filter">filter()</h3>
<p><strong>返回一个符合条件的新数组</strong>, 用于从数组内部筛选元素</p>
<p>语法: <code>filter(item=&gt;item)</code>​</p>
<p>filter 会遍历数组的每一个元素传入回调函数, 如果回调返回 true, 那么这个元素就会被加入返回的数组内</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 4, 6 ]</span></span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="map">map()</h3>
<p><strong>返回回调函数返回值组成的数组</strong>, 可以用来处理数组</p>
<p>语法: <code>map(item=&gt;item)</code>​</p>
<p>map 会遍历数组的每一个元素传入回调函数, 并将回调函数的返回值放入 map 返回的数组中</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&gt; arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item+<span class="number">10</span>)</span><br><span class="line">[ <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> ]</span><br></pre></td></tr></table></figure>
<h3 id="foreach">foreach()</h3>
<p><strong>无返回值</strong>, 遍历数组每个元素并执行回调函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&gt; arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(item,index)&#125;)</span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce">reduce()</h3>
<p>详情参阅<br>
<a href="https://www.freecodecamp.org/chinese/news/the-ultimate-guide-to-javascript-array-methods-reduce/">https://www.freecodecamp.org/chinese/news/the-ultimate-guide-to-javascript-array-methods-reduce/</a></p>
<p>用来处理数组, 最后返回一个任意类型的值</p>
<p>语法: <code>arr.reduce((pre,current)=&gt;&#123;&#125;,initVal)</code>​</p>
<p>参数:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>​<code>pre</code>​ :上次迭代的结果</p>
</li>
<li class="lvl-4">
<p>​<code>current</code>​: 当前迭代的值</p>
</li>
<li class="lvl-4">
<p>​<code>initVal</code>​: 初始值</p>
</li>
</ul>
<p>执行过程: <code>reduce</code> ​ 方法会迭代数组内所有值, 并且会把上次 <code>return</code> ​ 的执行结果作为当前的 <code>pre</code> ​ 参数</p>
<p>注意: <code>reduce</code> ​ 中一定要使用 <code>return</code> ​ 返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 累加值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼合字符串</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;小强&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res2 = arr2.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求每个人的年龄和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;小hs&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;小a&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">50</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res3 = arr3.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    sum += val.<span class="property">age</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h2 id="生成数组方法">生成数组方法</h2>
<h3 id="from">from()</h3>
<p>可以将伪数组(例如函数的 <code>arguments</code>​)转换为真正的数组, 返回转换完成的数组</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br></pre></td></tr></table></figure>
<p>还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">x</span>) =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组搜索方法">数组搜索方法</h2>
<p>​<code>index</code>​ 系列方法直接传入要搜索的值, <code>find</code>​ 系列方法传入回调</p>
<h3 id="indexOf">indexOf()</h3>
<p>返回<strong>搜索结果所在的下标,</strong> 如果没有结果那么返回 **<code>-1</code>**​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&gt; arr.<span class="title function_">indexOf</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="lastIndexOf">lastIndexOf()</h3>
<p>从<strong>后面开始搜索</strong>, 返回<strong>搜索结果所在的下标, ​</strong> 如果没有结果那么返回 **<code>-1</code>**​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">[</span><br><span class="line">  <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">  <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span></span><br><span class="line">]</span><br><span class="line">&gt; arr.<span class="title function_">lastIndexOf</span>(<span class="number">11</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="includes">includes()</h3>
<p>搜索数组, 如果包含参数值, 返回<code>true</code>​, 否则返回<code>false</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr.<span class="title function_">includes</span>(<span class="number">11</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="find">find()</h3>
<p>传入一个回单函数, <code>find</code>​<strong>返回第一个回调函数返回 true 的元素</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">[</span><br><span class="line">  <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">  <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span></span><br><span class="line">]</span><br><span class="line">&gt; arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">0</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="findIndex">findIndex()</h3>
<p>传入一个回单函数, <code>find</code>​<strong>返回第一个回调函数返回 true 的元素的下标</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">12</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="findLast">findLast()</h3>
<p>与<code>find</code>​ 类似, 从后查找</p>
<h3 id="findLastIndex">findLastIndex()</h3>
<p>与<code>findIndex</code>​ 类似, 从后查找</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>vue vee-validate 表单验证</title>
    <url>/20230106/vue-vee-validate-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>使用步骤</p>
<ul class="lvl-0">
<li class="lvl-4">使用第三包提供的<code>Form</code>标签将表单整个区域包裹起来, 如果要进行整体验证, 需要给<code>Form</code>打<code>ref</code></li>
<li class="lvl-4">使用第三方包提供的<code>Filed</code>标签将输入框的<code>input</code>替换掉</li>
<li class="lvl-4">如果表单需要校验，那么必须有<code>name</code>属性</li>
<li class="lvl-4">将校验规则通过<code>rules</code>绑定到需要校验的<code>Field</code>标签上</li>
<li class="lvl-4">当用户输入的内容未通过验证规则时，错误信息是从<code>Form</code>标签上的插槽中解构出来的</li>
</ul>
<span id="more"></span>
<p>引入组件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Field</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vee-validate&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>模板写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Form</span></span><br><span class="line">    v-slot=<span class="string">&quot;&#123; errors &#125;&quot;</span></span><br><span class="line">    ref=<span class="string">&quot;fromValidate&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-text clearFix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;邮箱/用户名/手机号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;phone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;account&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:rules</span>=<span class="string">&quot;checkAccount&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; errors.account &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-text clearFix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:rules</span>=<span class="string">&quot;checkPassword&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; errors.password &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click.prevent</span>=<span class="string">&quot;login&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">        登<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>录</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>书写验证规则</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义验证规则</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkAccount</span> = (<span class="params">val: <span class="built_in">unknown</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^[\a-zA-Z0-9_]+$/</span>;</span><br><span class="line">    <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请输入账号&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(val <span class="keyword">as</span> <span class="built_in">string</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;账号不合法 请输入6-16位数字字母下划线&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkPassword</span> = (<span class="params">val: <span class="built_in">unknown</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请输入密码&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>进行整体验证</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; valid &#125; = <span class="keyword">await</span> fromValidate.<span class="property">value</span>?.<span class="title function_">validate</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(valid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="comment">// 如果验证通过进行下一步</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript下给定时器标注类型</title>
    <url>/20220720/TypeScript%E4%B8%8B%E7%BB%99%E5%AE%9A%E6%97%B6%E5%99%A8%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3中 v-model封装自定义组件实现数据双向绑定</title>
    <url>/20230114/Vue3%E4%B8%AD-v-model%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>v-model 传进来的数据为<code>modelValue</code>, 要手动触发的事件为<code>update:modelValue</code></p>
<span id="more"></span>
<p>父组件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    请输入</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:value</span>=<span class="string">&quot;modelValue&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;modelValue&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>纯CSS实现全屏滚动效果</title>
    <url>/20230213/%E7%BA%AFCSS%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%8F%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>实现全屏滚动可以不依赖 JS, 只使用纯 CSS 实现, 不过只有较新版本的浏览器支持这一特性</p>
<p>主要使用了以下 CSS 属性</p>
<ul class="lvl-0">
<li class="lvl-4">
<p><code>scroll-snap-type: y mandatory;</code> 给父元素设置, 设置贴合类型</p>
</li>
<li class="lvl-4">
<p><code>scroll-snap-align: start;</code> 给子元素设置, 设置贴合点</p>
</li>
</ul>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;main&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure>
<p>容器布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">main</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">scroll-snap-type</span>: y mandatory;</span><br><span class="line">        <span class="attribute">overflow</span>: scroll;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: black <span class="number">2px</span> solid;</span><br><span class="line">        <span class="attribute">scroll-snap-align</span>: start;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>样式设置</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现图片压缩</title>
    <url>/20230203/JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1>图片等比缩小的方法</h1>
<img src="/20230203/JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/%E5%9B%BE%E7%89%87%E7%AD%89%E6%AF%94%E7%BC%A9%E6%94%BE.png" class="" title="图片等比缩放">
<h1>图片压缩的基本思路</h1>
<p>压缩图片主要利用了<code>canvas</code>的<code>toBlob</code>方法, <code>toBlob</code>方法可以将<code>canvas</code>画布的画面转换成<code>Blob</code>对象, 同时设置质量</p>
<ol>
<li class="lvl-3">
<p>获取<code>input</code>数据, 使用<code>fileReader</code>转换成 <code>dataUrl</code></p>
</li>
<li class="lvl-3">
<p>将<code>dataUrl</code>的值赋给<code>image</code>的<code>src</code></p>
</li>
<li class="lvl-3">
<p>将<code>image</code>绘制进<code>canvas</code>, 注意这里可以对图片尺寸进行控制</p>
</li>
<li class="lvl-3">
<p>使用<code>canvas.toBlob</code>获取 blob 对象, 可以在其中设置压缩比例</p>
</li>
<li class="lvl-3">
<p>上传图片</p>
</li>
</ol>
 <span id="more"></span>
<h1>完整代码</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传图片压缩的步骤</span></span><br><span class="line"><span class="comment">// 1. 获取input数据, 使用fileReader转换成dataUrl</span></span><br><span class="line"><span class="comment">// 2. 将dataUrl的值赋给image的src</span></span><br><span class="line"><span class="comment">// 3. 将image绘制进canvas</span></span><br><span class="line"><span class="comment">// 4. 使用canvas.toBlob获取blob对象, 可以在其中设置压缩比例</span></span><br><span class="line"><span class="comment">// 5. 上传图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileToImg = (<span class="attr">file</span>: <span class="title class_">File</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">HTMLImageElement</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        <span class="comment">// 将传进来的file转换成dataURl</span></span><br><span class="line">        reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">        reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            img.<span class="property">src</span> = reader.<span class="property">result</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        reader.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;;</span><br><span class="line">        img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgToBlob = (</span><br><span class="line">    <span class="attr">img</span>: <span class="title class_">HTMLImageElement</span>,</span><br><span class="line">    <span class="attr">maxWidth</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">maxHeight</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">quality</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="keyword">type</span> = <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">Blob</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取图片原始尺寸</span></span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">width</span>: originWidth, <span class="attr">height</span>: originHeight &#125; = img;</span><br><span class="line">        <span class="comment">// 确定目标尺寸</span></span><br><span class="line">        <span class="keyword">let</span> targetWidth = originWidth,</span><br><span class="line">            targetHeight = originHeight;</span><br><span class="line">        <span class="comment">// 如果图片尺寸大于目标尺寸, 那么就进行等比缩放</span></span><br><span class="line">        <span class="keyword">if</span> (targetWidth &gt; maxWidth || targetHeight &gt; maxHeight) &#123;</span><br><span class="line">            <span class="comment">// 等比缩小的算法</span></span><br><span class="line">            <span class="comment">// 如果是横着的图, 图片的宽等于最大宽度, 高等比缩放;</span></span><br><span class="line">            <span class="comment">// 如果是竖着的图, 图片的高等于最大高度, 宽等比缩放;</span></span><br><span class="line">            <span class="comment">// 先判断是横着的图还是竖着的图</span></span><br><span class="line">            <span class="keyword">if</span> (targetWidth &gt; targetHeight) &#123;</span><br><span class="line">                <span class="comment">//横着的</span></span><br><span class="line">                targetWidth = maxWidth;</span><br><span class="line">                targetHeight = targetHeight * (maxWidth / originWidth);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//竖着的</span></span><br><span class="line">                targetHeight = maxHeight;</span><br><span class="line">                targetWidth = targetWidth * (maxHeight / originHeight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把img绘制进canvas</span></span><br><span class="line">            canvas.<span class="property">width</span> = targetWidth;</span><br><span class="line">            canvas.<span class="property">height</span> = targetHeight;</span><br><span class="line">            ctx?.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">            ctx?.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">            <span class="comment">// 获取blob对象</span></span><br><span class="line">            canvas.<span class="title function_">toBlob</span>(</span><br><span class="line">                <span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (blob) &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(blob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;转换失败&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">type</span>,</span><br><span class="line">                quality,</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>);</span><br><span class="line">inp?.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> inputEle = e.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    <span class="keyword">if</span> (inputEle.<span class="property">files</span>?.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">await</span> <span class="title function_">fileToImg</span>(inputEle.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">await</span> <span class="title function_">imgToBlob</span>(img, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">0.2</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(blob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript获取剪贴板文件</title>
    <url>/20230113/JavaScript%E8%8E%B7%E5%8F%96%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;paste&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clipboardData</span>.<span class="property">files</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-栈</title>
    <url>/20221214/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E6%A0%88/</url>
    <content><![CDATA[<p>栈结构遵循以下规则</p>
<ul class="lvl-0">
<li class="lvl-4">数据从栈顶 (又称为栈尾) 进入</li>
<li class="lvl-4">从栈顶退出</li>
<li class="lvl-4">遵循后进先出的 LIFO 原则</li>
</ul>
<p>一个栈应该有以下方法: push pop peek isEmpty size clear toString<br /></p>
<span id="more"></span>
<h2 id="封装一个栈">封装一个栈</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个栈应该有以下方法: push pop peek isEmpty size clear toString</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">stack</span>: <span class="built_in">unknown</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">push</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回栈顶元素</span></span><br><span class="line">    <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>[<span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">debugger</span>;</span><br></pre></td></tr></table></figure>
<h2 id="应用-进制转换">应用: 进制转换</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Stack</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./stack&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制转换 利用辗转相除法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">DecNumber: <span class="built_in">number</span>, base: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> remStack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    <span class="keyword">const</span> baseString = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title class_">DecNumber</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        remStack.<span class="title function_">push</span>(<span class="title class_">DecNumber</span> % base);</span><br><span class="line">        <span class="title class_">DecNumber</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">DecNumber</span> / base);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!remStack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">        res += baseString[remStack.<span class="title function_">pop</span>() <span class="keyword">as</span> <span class="built_in">number</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convert</span>(<span class="number">1234</span>, <span class="number">16</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Vue 项目开启 PWA</title>
    <url>/20230220/%E4%B8%BA-Vue-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%90%AF-PWA/</url>
    <content><![CDATA[<img src="/20230220/%E4%B8%BA-Vue-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%90%AF-PWA/pwa%E6%95%88%E6%9E%9C.png" class="" title="pwa效果">
<p>之前的网络上的教程都是 vue/cli 的, 经过我的一番摸索, 终于弄明白了 vite+vue3+pwa 的正确打开方式</p>
<ol>
<li class="lvl-3">
<p>安装 <code>​ vite-plugin-pwa</code></p>
<p><code>npm i vite-plugin-pwa -D</code></p>
</li>
<li class="lvl-3">
<p>配置 <code>vite-plugin-pwa</code></p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VitePWA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vite-plugin-pwa&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title class_">VitePWA</span>(&#123; <span class="attr">registerType</span>: <span class="string">&quot;autoUpdate&quot;</span> &#125;)],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1>使 PWA 可安装</h1>
<p>一开始配置好后, 浏览器并没有提示可以安装, 经过一晚上的摸索(看文档), 最终总结如下</p>
<p>使 PWA 可安装的前置要求: <a href="https://vite-pwa-org.netlify.app/guide/pwa-minimal-requirements.html">https://vite-pwa-org.netlify.app/guide/pwa-minimal-requirements.html</a></p>
<p>必须?同时满足以下条件</p>
<ul class="lvl-0">
<li class="lvl-4">
<p><code>index.html</code> 中的 <code>&lt;head&gt;</code> 标签中配置如下条目</p>
<ul class="lvl-2">
<li class="lvl-8"><code>viewport</code></li>
<li class="lvl-8"><code>title</code> 标签</li>
<li class="lvl-8"><code>description</code></li>
<li class="lvl-8"><code>favicon</code></li>
<li class="lvl-8"><code>apple-touch-icon</code></li>
<li class="lvl-8"><code>mask-icon</code></li>
<li class="lvl-8"><code>theme-color</code></li>
</ul>
</li>
<li class="lvl-4">
<p><code>Manifest</code> 清单文件中有如下配置</p>
<ul class="lvl-2">
<li class="lvl-8">a scope: omitted here for simplicity, the <code>vite-plugin-pwa</code> plugin will use the <code>Vite</code> base option to configure it (default is <code>/</code>)</li>
<li class="lvl-8">a name</li>
<li class="lvl-8">a short description</li>
<li class="lvl-8">a description</li>
<li class="lvl-8">a <code>theme_color</code>: <strong>must match</strong> the configured one on <code>Entry Point theme-color</code></li>
<li class="lvl-8">an icon with <code>192x192</code> size</li>
<li class="lvl-8">an icon with <code>512x512</code> size</li>
</ul>
</li>
<li class="lvl-4">
<p>也就是 <code>vite.config.js</code> 进行如下配置</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VitePWA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vite-plugin-pwa&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title class_">VitePWA</span>(&#123;</span><br><span class="line">            <span class="attr">includeAssets</span>: [</span><br><span class="line">                <span class="string">&quot;favicon.ico&quot;</span>,</span><br><span class="line">                <span class="string">&quot;apple-touch-icon.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;masked-icon.svg&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">manifest</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;My Awesome App&quot;</span>,</span><br><span class="line">                <span class="attr">short_name</span>: <span class="string">&quot;MyApp&quot;</span>,</span><br><span class="line">                <span class="attr">description</span>: <span class="string">&quot;My Awesome App description&quot;</span>,</span><br><span class="line">                <span class="attr">theme_color</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">                <span class="attr">icons</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">src</span>: <span class="string">&quot;pwa-192x192.png&quot;</span>,</span><br><span class="line">                        <span class="attr">sizes</span>: <span class="string">&quot;192x192&quot;</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">src</span>: <span class="string">&quot;pwa-512x512.png&quot;</span>,</span><br><span class="line">                        <span class="attr">sizes</span>: <span class="string">&quot;512x512&quot;</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>配置 <code>robots.txt</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">User</span>-<span class="attr">agent</span>: *</span><br><span class="line"><span class="title class_">Allow</span>: /</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>服务端满足以下要求 <a href="https://vite-pwa-org.netlify.app/deployment/">https://vite-pwa-org.netlify.app/deployment/</a></p>
<ul class="lvl-2">
<li class="lvl-8">serve <code>manifest.webmanifest</code> with <code>application/manifest+json</code> mime type</li>
<li class="lvl-8">必须使用 <code>https</code></li>
<li class="lvl-8"><code>http ​</code> 重定向 <code>https</code></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>pwa</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 单独清除某个网页的缓存</title>
    <url>/20230216/Chrome-%E5%8D%95%E7%8B%AC%E6%B8%85%E9%99%A4%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<img src="/20230216/Chrome-%E5%8D%95%E7%8B%AC%E6%B8%85%E9%99%A4%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E7%BC%93%E5%AD%98/%E6%B8%85%E9%99%A4%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98.png" class="" title="清除网页缓存">
<ol>
<li class="lvl-3">打开该网页</li>
<li class="lvl-3">打开开发者工具</li>
<li class="lvl-3">长按刷新按钮</li>
<li class="lvl-3">选择 清空缓存并硬性重新加载</li>
</ol>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>利用pandoc合并markdown及转换为docx</title>
    <url>/20230120/%E5%88%A9%E7%94%A8pandoc%E5%90%88%E5%B9%B6markdown%E5%8F%8A%E8%BD%AC%E6%8D%A2%E4%B8%BAdocx/</url>
    <content><![CDATA[<p>最近有需求把 markdown 文档合并起来然后转换为 word 文档以供打印的需求, 所以了解到了 pandoc 这一款命令行文本处理神器</p>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-4">
<p>批量合并 markdown<br>
小 tips: 如果需要大批量文件, 可以在资源管理器中全选, 然后拖到终端窗口中, 自动填充路径及文件名</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandoc -s file1.md file2.md -o AllJavaScript.md</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>markdown 转 doc</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandoc -o output.docx -f markdown -t docx .\AllInOne.md</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>小工具</tag>
        <tag>pandoc</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Acme.sh + CloudFlare Dns认证申请泛域名证书</title>
    <url>/20230120/%E9%80%9A%E8%BF%87Acme-sh-CloudFlare-Dns%E8%AE%A4%E8%AF%81%E7%94%B3%E8%AF%B7%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>使用 <a href="http://acme.sh">acme.sh</a> 这个神器, 可以快速的申请泛域名证书, 省去繁琐的手动申请的步骤</p>
<p>由于我的域名使用了 CloudFlare Dns , 所以我用了 CloudFlare 的 api 认证方式</p>
<h2 id="使用步骤">使用步骤</h2>
<ul class="lvl-0">
<li class="lvl-4">
<p>首先在 CloudFlare 控制面板中获取 api key ,此处不多赘述</p>
</li>
<li class="lvl-4">
<p>设置环境变量</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CF_Key=&quot;cloudflare申请的apikey&quot;</span><br><span class="line">export CF_Email=&quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>使用 <a href="http://acme.sh">acme.sh</a> 注册 acme 账号</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --register-account -m 你的邮箱</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>使用 <a href="http://acme.sh">acme.sh</a> 快速申请泛域名证书, 并安装到 nginx 路径</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d &quot;cuijunyu.win&quot; -d &quot;*.cuijunyu.win&quot; --dns dns_cf \</span><br><span class="line">--key-file       /etc/nginx/ssl/cuijunyu.key  \</span><br><span class="line">--fullchain-file /etc/nginx/ssl/cuijunyu.pem \</span><br><span class="line">--reloadcmd &quot;nginx -s reload&quot;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>删除已安装的证书</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --remove -d cuijunyu.win -d &quot;*.cuijunyu.win&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CloudFlare</tag>
      </tags>
  </entry>
  <entry>
    <title>通过nginx反代openai api</title>
    <url>/20230306/%E9%80%9A%E8%BF%87nginx%E5%8F%8D%E4%BB%A3openai-api/</url>
    <content><![CDATA[<p>最近 openai 发布了 chatGPT 同款的 GPT-3.5 trubo API, 并且价格十分低廉, 正当大家跃跃欲试的时候却发现 GFW 却已经先我们一步了…</p>
<span id="more"></span>
<p>那么解决方案也很简单, 首先你需要一台安装了 nginx 境外服务器, 然后配置如下即可使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 8443 ssl;</span><br><span class="line">	server_name openai.example.com;</span><br><span class="line">	ssl_certificate /etc/nginx/ssl/cuijunyu.pem;</span><br><span class="line">	ssl_certificate_key /etc/nginx/ssl/cuijunyu.key;</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass https://api.openai.com/;</span><br><span class="line">		proxy_set_header Host api.openai.com;</span><br><span class="line">		proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>请求 api 的时候, 你只需要把 URL 换成 <a href="http://openai.example.com">openai.example.com</a> 就可以了</p>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>openai</tag>
      </tags>
  </entry>
  <entry>
    <title>TS+ESM项目导入自定义模块不加扩展名就报错的问题</title>
    <url>/20230306/TS+ESM%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E4%B8%8D%E5%8A%A0%E6%8B%93%E5%B1%95%E5%90%8D%E5%B0%B1%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>折腾了两个小时，我基本弄明白了如何在 TypeScript 中使用自定义的 ESM 模块。</p>
<p>一开始以为直接导入文件名就行，不需要扩展名。但是，这样使用 TSC 编译出来之后运行报错，因为 ESM 规范要求导入自定义模块必须带有扩展名。然而，TSC 编译出来的项目中导入模块是不带扩展名的，所以 Node.js 会报错。</p>
<p>于是，我想当然地写了 <code>import router from &quot;./router.ts&quot;;</code>，认为 TypeScript 会自动处理扩展名。然而，并不是这样的。</p>
<p>TypeScript 直接不允许导入 <code>.ts</code> 后缀的文件，要求启用 <code>allowImportingTsExtensions</code>。但是加了这个选项之后，出现了更多的错误：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">error <span class="title class_">TS2691</span>: <span class="title class_">An</span> <span class="keyword">import</span> path cannot end <span class="keyword">with</span> a <span class="string">&#x27;.ts&#x27;</span> extension. <span class="title class_">Consider</span> importing <span class="string">&#x27;./router.js&#x27;</span> instead.</span><br><span class="line">error <span class="title class_">TS2835</span>: <span class="title class_">Relative</span> <span class="keyword">import</span> paths need explicit file extensions <span class="keyword">in</span> <span class="title class_">EcmaScript</span> imports when <span class="string">&#x27;--moduleResolution&#x27;</span> is <span class="string">&#x27;node16&#x27;</span> or <span class="string">&#x27;nodenext&#x27;</span>. <span class="title class_">Did</span> you mean <span class="string">&#x27;./event.js&#x27;</span>?</span><br></pre></td></tr></table></figure>
<p>关于这个问题，在 GitHub 上有相关的讨论：<a href="https://github.com/microsoft/TypeScript/issues/16577">https://github.com/microsoft/TypeScript/issues/16577</a></p>
<h1>解决方案</h1>
<ol>
<li class="lvl-3">
<p>在 <code>tsconfig.json</code> 中将 <code>moduleResolution</code> 设置为 <code>nodenext</code>。设置之后，VS Code 导入模块时会自动加上 <code>.js</code> 后缀。</p>
</li>
<li class="lvl-3">
<p>使用 <code>import router from &quot;./router.js&quot;;</code>，注意这里扩展名为 <code>.js</code>。</p>
</li>
</ol>
<p>实际上，上面的报错也说明了问题：“An import path cannot end with a ‘.ts’ extension. Consider importing ‘./router.js’ instead.”（导入路径不能以 <code>.ts</code> 结尾，考虑导入 ‘./router.js’）</p>
<p>非常坑啊有没有，明明是 TypeScript，为什么要导入 JavaScript 呢？</p>
<p>ChatGPT 给出了解释：</p>
<blockquote>
<p>您在 TypeScript 中导入模块时，使用的是相对路径或绝对路径来引用另一个文件。这与 JavaScript 中的导入语句类似。</p>
<p>当 TypeScript 编译器将 TypeScript 代码转换为 JavaScript 代码时，它会自动将 <code>.ts</code> 扩展名更改为 <code>.js</code> 扩展名，并生成一个新的 JavaScript 文件，其中包含编译后的 JavaScript 代码。</p>
<p>因此，即使您在 TypeScript 代码中导入的是 <code>.ts</code> 文件，最终在运行时实际上会加载并执行 <code>.js</code> 文件，因此需要在导入语句中指定 <code>.js</code> 扩展名。</p>
</blockquote>
]]></content>
      <tags>
        <tag>typeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-队列</title>
    <url>/20230306/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1>队列是什么</h1>
<p>队列是一种特殊的线性表, 他只允许在表的前端进行删除操作, 在表的后端进行插入操作</p>
<p>只有最早进入队列的元素才能最先从队列中删除, 所以队列又称为 先进先出线性表 (FIFO)</p>
<h1>队列的实现</h1>
<h3 id="数组实现的队列">数组实现的队列</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">arrQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">queue</span>: <span class="built_in">unknown</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列尾部插入元素</span></span><br><span class="line">    <span class="title function_">enqueue</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列头部删除元素</span></span><br><span class="line">    <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列头部元素</span></span><br><span class="line">    <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">at</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title function_">arrQueue</span>();</span><br></pre></td></tr></table></figure>
<p>数组实现的队列虽然简单, 但是由于 shift 操作消耗资源大, 所以这种队列性能不高</p>
<h3 id="对象实现的队列">对象实现的队列</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">QueueObj</span> = &#123;</span><br><span class="line">    [<span class="attr">k</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用对象实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">objectQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">queue</span>: <span class="title class_">QueueObj</span> = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 开始的下标</span></span><br><span class="line">    <span class="keyword">private</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结束的下标</span></span><br><span class="line">    <span class="keyword">private</span> end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列尾部插入元素</span></span><br><span class="line">    <span class="title function_">enqueue</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span>] = data;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span>++;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列头部删除元素</span></span><br><span class="line">    <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> item = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">start</span>++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列头部元素</span></span><br><span class="line">    <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">end</span> - <span class="variable language_">this</span>.<span class="property">start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">start</span>; index &lt; <span class="variable language_">this</span>.<span class="property">end</span>; index++) &#123;</span><br><span class="line">            str += <span class="variable language_">this</span>.<span class="property">queue</span>[index] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双端队列">双端队列</h2>
<p>双端队列（Double-ended queue，简称 deque）是一种具有队列和栈的性质的数据结构，它允许从两端添加和删除元素。</p>
<p>实现:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DoubleQueue</span> = &#123;</span><br><span class="line">    [<span class="attr">k</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用对象实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doubleQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">queue</span>: <span class="title class_">DoubleQueue</span> = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 开始的下标</span></span><br><span class="line">    <span class="keyword">private</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结束的下标</span></span><br><span class="line">    <span class="keyword">private</span> end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列头部添加元素</span></span><br><span class="line">    <span class="title function_">addFront</span>(<span class="params">data: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span>--;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>] = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从队列尾部插入元素</span></span><br><span class="line">    <span class="title function_">addBack</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span>] = data;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span>++;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从队列头部删除元素</span></span><br><span class="line">    <span class="title function_">delFront</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">start</span>++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列尾部删除元素</span></span><br><span class="line">    <span class="title function_">delBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">end</span>--;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列头部元素</span></span><br><span class="line">    <span class="title function_">peekFront</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回队列尾部元素</span></span><br><span class="line">    <span class="title function_">peekBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">end</span> - <span class="variable language_">this</span>.<span class="property">start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">start</span>; index &lt; <span class="variable language_">this</span>.<span class="property">end</span>; index++) &#123;</span><br><span class="line">            str += <span class="variable language_">this</span>.<span class="property">queue</span>[index] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>队列的应用</h1>
<h2 id="击鼓传花游戏">击鼓传花游戏</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 击鼓传花游戏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">game</span>(<span class="params">list: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;, num: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title function_">objectQueue</span>();</span><br><span class="line">    <span class="comment">// 先把人员入栈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止条件是 队列中只有一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="comment">// 将队列头部的元素添加到队尾</span></span><br><span class="line">            queue.<span class="title function_">enqueue</span>(queue.<span class="title function_">dequeue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环结束队头的就是出局者</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>() + <span class="string">&quot;淘汰了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个元素的话 这就是获胜者</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>() + <span class="string">&quot;胜利&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">game</span>([<span class="string">&quot;tim&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;nana&quot;</span>, <span class="string">&quot;tina&quot;</span>], <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<h2 id="检查回文数-双端队列">检查回文数 (双端队列)</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回文数检查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 全部转小写, 去掉空格</span></span><br><span class="line">    str = str.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理后的字符串:&quot;</span> + str);</span><br><span class="line">    <span class="comment">// 将字符串加入队列</span></span><br><span class="line">    <span class="keyword">const</span> que = <span class="keyword">new</span> <span class="title function_">doubleQueue</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        que.<span class="title function_">addBack</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 取出首尾元素进行对比</span></span><br><span class="line">    <span class="keyword">while</span> (que.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (que.<span class="title function_">delFront</span>() != que.<span class="title function_">delBack</span>()) &#123;</span><br><span class="line">            tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&quot;abc dc bA&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ts-node调试ESM项目提示[ERR_UNKNOWN_FILE_EXTENSION]</title>
    <url>/20230307/ts-node%E8%B0%83%E8%AF%95ESM%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>如果直接使用 ts-node 运行开启了 ESM 的项目, 会提示未知扩展名</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">PS</span> <span class="attr">C</span>:\学习\前端\<span class="title class_">VoiceGPT</span>\voiceGPT-backend&gt; ts-node .\src\index.<span class="property">ts</span></span><br><span class="line"><span class="title class_">TypeError</span> [<span class="variable constant_">ERR_UNKNOWN_FILE_EXTENSION</span>]: <span class="title class_">Unknown</span> file extension <span class="string">&quot;.ts&quot;</span> <span class="keyword">for</span> <span class="attr">C</span>:\学习\前端\<span class="title class_">VoiceGPT</span>\voiceGPT-backend\src\index.<span class="property">ts</span></span><br><span class="line">    at <span class="keyword">new</span> <span class="title class_">NodeError</span> (<span class="attr">node</span>:internal/<span class="attr">errors</span>:<span class="number">399</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">getFileProtocolModuleFormat</span> [<span class="keyword">as</span> <span class="attr">file</span>:] (<span class="attr">node</span>:internal/modules/esm/<span class="attr">get_format</span>:<span class="number">79</span>:<span class="number">11</span>)</span><br><span class="line">    at defaultGetFormat (<span class="attr">node</span>:internal/modules/esm/<span class="attr">get_format</span>:<span class="number">121</span>:<span class="number">38</span>)</span><br><span class="line">    at defaultLoad (<span class="attr">node</span>:internal/modules/esm/<span class="attr">load</span>:<span class="number">81</span>:<span class="number">20</span>)</span><br><span class="line">    at nextLoad (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">163</span>:<span class="number">28</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.<span class="property">load</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">605</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.<span class="property">moduleProvider</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">457</span>:<span class="number">22</span>)</span><br><span class="line">    at <span class="keyword">new</span> <span class="title class_">ModuleJob</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">module_job</span>:<span class="number">64</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.#createModuleJob (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">480</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.<span class="property">getModuleJob</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">434</span>:<span class="number">34</span>) &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;ERR_UNKNOWN_FILE_EXTENSION&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决方法: 将运行命令改为</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">ts-node --esm .\src\index.<span class="property">ts</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>typeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-链表</title>
    <url>/20230308/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1>链表</h1>
<p>链表是一种物理存储单元上非连续, 非顺序的存储结构, 数据元素的逻辑顺序是通过链表指针实现的, 链表由一些列结点组成, 每个节点包含两个部分: 一个是存储数据元素的数据域, 另一个是存储下一个结点地址的指针域</p>
<p>链表结构可以充分利用计算机内存空间, 实现灵活的内存动态管理, 但是链表失去了数组孙继读取的优点, 同时链表由于增加了结点的指针域, 空间开销比较大</p>
<h3 id="链表的特点">链表的特点</h3>
<ul class="lvl-0">
<li class="lvl-4">
<p>插入删除效率高 O(1), 只需要改变指针指向即可, 随机访问效率低 O(n)(需要从链头到链尾遍历)</p>
</li>
<li class="lvl-4">
<p>与数组相比, 内存空间消耗更大, 因为每个存储数据的节点都需要额外的空间存储后继指针</p>
</li>
</ul>
<p>‍</p>
<p>‍</p>
<h1>单链表</h1>
<p>单链表的每一个节点, 都包含了数据区域和 next 指向下一个节点的指针</p>
<img src="/20230308/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8.png" class="" title="单向链表">
<h3 id="代码实现">代码实现</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">next</span>: <span class="title class_">LinkNode</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">head</span>: <span class="title class_">LinkNode</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 新建节点</span></span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line">        <span class="comment">// 如果链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="comment">// 遍历链表, 直到最后一个元素</span></span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除指定位置的节点</span></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">removeNode</span>: <span class="title class_">LinkNode</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果删除第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 头指针指向第二个元素</span></span><br><span class="line">                removeNode = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = removeNode?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;要删除的元素是&quot;</span> + removeNode?.<span class="property">element</span>);</span><br><span class="line">                <span class="keyword">return</span> removeNode?.<span class="property">element</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果删除的不是第一个元素</span></span><br><span class="line">                <span class="comment">// 找到他的前一个元素</span></span><br><span class="line">                <span class="keyword">const</span> prev = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">                removeNode = prev?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;要删除的元素是&quot;</span> + removeNode?.<span class="property">element</span>);</span><br><span class="line">                <span class="comment">// 要删除的元素前一个元素的next=要删除的元素后一个元素</span></span><br><span class="line">                prev!.<span class="property">next</span> = removeNode?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> removeNode?.<span class="property">element</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">indexOf</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 根据数据, 返回索引</span></span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (current?.<span class="property">next</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(current.<span class="property">element</span>) == <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            current = current?.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getNodeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                current = current?.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            str += <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(current.<span class="property">element</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">            current = current?.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">insertElement</span>(<span class="params">element: <span class="built_in">any</span>, index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果插入最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">push</span>(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line">        <span class="comment">// 如果在第一个元素之前插入</span></span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在指定位置插入一个元素</span></span><br><span class="line">        <span class="comment">// 新建一个节点, 新节点的next=插入位置的next, 插入位置的next=新节点,</span></span><br><span class="line">        <span class="comment">// 插入位置的节点</span></span><br><span class="line">        <span class="keyword">const</span> insertedNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (insertedNode) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            newNode.<span class="property">next</span> = insertedNode?.<span class="property">next</span>;</span><br><span class="line">            insertedNode.<span class="property">next</span> = newNode;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>‍</p>
<p>‍</p>
<h3 id="单链表的应用">单链表的应用</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回文数检查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 全部转小写, 去掉空格</span></span><br><span class="line">    str = str.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理后的字符串:&quot;</span> + str);</span><br><span class="line">    <span class="comment">// 将字符串加入队列</span></span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        list.<span class="title function_">push</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出首尾元素进行对比</span></span><br><span class="line">    <span class="keyword">while</span> (list.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.<span class="title function_">removeAt</span>(<span class="number">0</span>) !== list.<span class="title function_">removeAt</span>(list.<span class="title function_">size</span>() - <span class="number">1</span>)) &#123;</span><br><span class="line">            tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&quot;abc dc bA&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1>双向链表</h1>
<p>节点除了数据区域外, 还有两个指针, 分别为前驱指针 prev 和后继指针 next</p>
<img src="/20230308/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" class="" title="双向链表">
<p>在双向链表中删除元素需要考虑以下边界条件：</p>
<ol>
<li class="lvl-3">
<p>如果链表为空，不能进行删除操作。</p>
</li>
<li class="lvl-3">
<p>如果要删除的元素是头结点或者尾节点，则需要更新 <code>head</code>​ 或 <code>tail</code>​ 指针。</p>
</li>
<li class="lvl-3">
<p>如果要删除的元素不是头节点或尾节点，则需要更新其前驱节点的 <code>next</code>​ 指针和后继节点的 <code>prev</code>​ 指针。</p>
</li>
<li class="lvl-3">
<p>如果输入的索引超出链表长度，应该返回 <code>undefined</code>​。</p>
</li>
</ol>
<p>特别地，如果链表只有一个元素，那么删除唯一一个元素后，需要将 <code>head</code>​ 和 <code>tail</code>​ 指针都置为 <code>null</code>​。</p>
<h2 id="代码实现-2">代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LinkNode</span>, <span class="title class_">LinkedList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./单链表&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doubleLinkNode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkNode</span> &#123;</span><br><span class="line">    <span class="attr">prev</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">next</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(element);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">prev</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doubleLinkList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line">    <span class="attr">head</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">tail</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="attr">element</span>: <span class="built_in">any</span>): doubleLinkNode &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title function_">doubleLinkNode</span>(element);</span><br><span class="line">        <span class="comment">// 如果链表内没有元素,</span></span><br><span class="line">        <span class="comment">// 直接添加</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果链表内有元素</span></span><br><span class="line">            <span class="comment">// 当前的最后一个元素的next指向新元素,</span></span><br><span class="line">            <span class="comment">// 新元素的prev指向当前的元素</span></span><br><span class="line">            <span class="comment">// 改变tail的指向</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>!.<span class="property">next</span> = node;</span><br><span class="line">            node.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">element: <span class="built_in">any</span>, index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 首先判断index是否符合条件</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title function_">doubleLinkNode</span>(element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有元素</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果有元素想要插入最前</span></span><br><span class="line">                node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = node;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是在最后插入</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>!.<span class="property">next</span> = node;</span><br><span class="line">            node.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在内部插入</span></span><br><span class="line">            <span class="comment">// 前一个结点的next=新节点</span></span><br><span class="line">            <span class="comment">// 后一个节点的prev=新节点</span></span><br><span class="line">            <span class="comment">// 新节点的prev=前一个结点</span></span><br><span class="line">            <span class="comment">// 新节点的next=后一个节点</span></span><br><span class="line">            <span class="keyword">const</span> prevNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>) <span class="keyword">as</span> doubleLinkNode;</span><br><span class="line">            <span class="keyword">const</span> nextNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index) <span class="keyword">as</span> doubleLinkNode;</span><br><span class="line"></span><br><span class="line">            prevNode.<span class="property">next</span> = node;</span><br><span class="line">            nextNode.<span class="property">prev</span> = node;</span><br><span class="line">            node.<span class="property">prev</span> = prevNode;</span><br><span class="line">            node.<span class="property">next</span> = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">//在双向链表中删除元素需要考虑以下边界条件：</span></span><br><span class="line">        <span class="comment">// 如果链表为空，不能进行删除操作。</span></span><br><span class="line">        <span class="comment">// 如果要删除的元素是头结点或者尾节点，则需要更新 head 或 tail 指针。</span></span><br><span class="line">        <span class="comment">// 如果要删除的元素不是头节点或尾节点，则需要更新其前驱节点的 next 指针和后继节点的 prev 指针。</span></span><br><span class="line">        <span class="comment">// 如果输入的索引超出链表长度，应该返回 undefined。</span></span><br><span class="line">        <span class="comment">// 特别地，如果链表只有一个元素，那么删除唯一一个元素后，需要将 head 和 tail 指针都置为 null。</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">current</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = current?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span>!.<span class="property">prev</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除最后的元素</span></span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = current?.<span class="property">prev</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>!.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 删除中间的元素</span></span><br><span class="line">            <span class="keyword">const</span> prevNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>) <span class="keyword">as</span> doubleLinkNode;</span><br><span class="line">            current = prevNode.<span class="property">next</span>;</span><br><span class="line">            prevNode.<span class="property">next</span> = current?.<span class="property">next</span>;</span><br><span class="line">            current!.<span class="property">next</span>!.<span class="property">prev</span> = prevNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h1>循环链表</h1>
<p>循环列表的最后一个结点的 next 指向 head 结点</p>
<h2 id="代码实现-3">代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LinkNode</span>, <span class="title class_">LinkedList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./单链表&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">circularLinkedList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="attr">element</span>: <span class="built_in">any</span>): <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果空表</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>);</span><br><span class="line">            current!.<span class="property">next</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">insertElement</span>(<span class="attr">element</span>: <span class="built_in">any</span>, <span class="attr">index</span>: <span class="built_in">number</span>): <span class="title class_">LinkNode</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有元素</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">                newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newNode.<span class="property">next</span> = current;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将最后的元素重新指向头</span></span><br><span class="line">                current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>);</span><br><span class="line">                current!.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在中间插入</span></span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">            newNode.<span class="property">next</span> = current?.<span class="property">next</span>;</span><br><span class="line">            current!.<span class="property">next</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果只有一个元素</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> last = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = current?.<span class="property">next</span>;</span><br><span class="line">                last!.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">            current!.<span class="property">next</span> = current?.<span class="property">next</span>?.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>‍</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>在Snipaste中支持ocr[需高级版]</title>
    <url>/20230310/%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/</url>
    <content><![CDATA[<p>Snipaste 是一款非常好用的截图软件, 但是却缺少了一个非常重要的功能–ocr</p>
<p>在作者帮助下, 我成功的让 Snipaste 支持了 ocr 功能, 此功能需要高级版的 [自定义命令] 功能搭配 <code>tesseract-ocr</code> 实现 ocr 功能, 而且体验很好</p>
<img src="/20230310/%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E6%BC%94%E7%A4%BAocr%E6%95%88%E6%9E%9C.gif" class="" title="演示ocr效果">
<h1>配置过程</h1>
<ol>
<li class="lvl-4">
<p>前往 <a href="https://digi.bib.uni-mannheim.de/tesseract/">https://digi.bib.uni-mannheim.de/tesseract/</a> 下载安装最新版<code>​ tesseract-ocr</code>,</p>
<ol>
<li class="lvl-7">安装过程中, 选择中文识别包 <img src="/20230310/%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E5%AE%89%E8%A3%85.png" class="" title="安装"></li>
</ol>
</li>
<li class="lvl-4">
<p>安装完成之后, 可以使用如下命令进行本地 ocr:</p>
<p>1.<code> tesseract &lt;需 ocr 的图像&gt; &lt;输出文件位置, 注意不需要写扩展名&gt; -c preserve_interword_spaces=1 --oem 1 --psm 1 -l eng+chi_sim</code></p>
<p>其中<code>-c preserve_interword_spaces=1 --oem 1 --psm 1 -l eng+chi_sim</code> 为识别参数, <code>preserve_interword_spaces=1</code>可以去掉多余的空格, <code>-l eng+chi_sim</code> 是指定识别语言</p>
</li>
<li class="lvl-4">
<p>打开 Snipaste 的首选项-控制, 点击添加新命令</p>
<ol>
<li class="lvl-7">
<img src="/20230310/%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E9%85%8D%E7%BD%AE1.png" class="" title="配置1">
</li>
<li class="lvl-7">
<img src="/20230310/%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E9%85%8D%E7%BD%AE2.png" class="" title="配置2">
</li>
</ol>
</li>
<li class="lvl-4">
<p>名称随意填写, 命令填写如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snip -o &quot;D:\Temp\source.png&quot;;exec(cmd /c &quot;C:\Program Files\Tesseract-OCR\tesseract.exe&quot;  &quot;D:\Temp\source.png&quot; &quot;D:\Temp\ocrRes&quot; -c preserve_interword_spaces=1 --oem 1 --psm 1 -l eng+chi_sim &amp;&amp;  notepad &quot;D:\Temp\ocrRes.txt&quot;);</span><br></pre></td></tr></table></figure>
<p>这段命令的含义是首先调用 Snipaste 截图并存放于<code>D:\Temp\source.png</code>, 然后执行 cmd 命令, 调用<code>tesseract</code>进行 ocr 识别, 并将识别结果用记事本打开 其中, **<code>C:\Program Files\Tesseract-OCR\tesseract.exe</code>**为你的<code>tesseract</code>安装路径, <code>D:\Temp\ocrRes</code>为 ocr 结果的文件路径, 注意只需要写文件名, 不需要拓展名, 文件名和路径请根据自己需要修改</p>
</li>
<li class="lvl-4">
<p>随后指定一个快捷键即可愉快的 OCR 啦 !! 😋😋😋😋😋</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>ocr</tag>
        <tag>snipaste</tag>
      </tags>
  </entry>
</search>
